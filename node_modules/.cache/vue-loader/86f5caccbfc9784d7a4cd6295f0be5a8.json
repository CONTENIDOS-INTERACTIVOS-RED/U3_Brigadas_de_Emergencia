{"remainingRequest":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/src/views/curso/Tema3.vue?vue&type=template&id=44a555ba&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/src/views/curso/Tema3.vue","mtime":1740291062927},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMy4gRm9ybWF0b3MgZSBpbnN0cnVjdGl2b3MnIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnAtNC5wLW1kLTUub3ZlcmZsb3ctaGlkZGVuCgogICAgICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTcKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgRGVzcHXDqXMgZGUgYWJvcmRhciB0b2RvIGxvIGNvcnJlc3BvbmRpZW50ZSBhIGV2aWRlbmNpYXMgZG9jdW1lbnRhbGVzIHkgcHJvY2VkaW1pZW50b3MgZGUgYnJpZ2FkYSBkZSBlbWVyZ2VuY2lhLCBzZSBoYWNlIG5lY2VzYXJpbyByZWFsaXphciB1biByZXBhc28gcG9yIGVsIHVzbyBkZSBmb3JtYXRvcyBlIGluc3RydWN0aXZvcyBwdWVzdG8gcXVlIGVzIGVzZW5jaWFsIHBhcmEgZ2FyYW50aXphciBsYSBjb3JyZWN0YSBlamVjdWNpw7NuIGRlIGxvcyBwcm9jZWRpbWllbnRvcyB5IGFzZWd1cmFyIHF1ZSBjYWRhIG1pZW1icm8gZGVsIGVxdWlwbyBzaWdhIGxvcyBwcm90b2NvbG9zIGVzdGFibGVjaWRvcy4gRXN0b3MgZG9jdW1lbnRvcyBzaXJ2ZW4gcGFyYSBlc3RydWN0dXJhciBsYSBpbmZvcm1hY2nDs24sIGZhY2lsaXRhciBsYSB0b21hIGRlIGRlY2lzaW9uZXMgeSBtYW50ZW5lciB1biByZWdpc3RybyBkZXRhbGxhZG8gZGUgbGFzIGFjY2lvbmVzIHJlYWxpemFkYXMgZHVyYW50ZSB1bmEgZW1lcmdlbmNpYS4gQSBjb250aW51YWNpw7NuLCBzZSBkZXNjcmliZW4gYWxndW5vcyBkZSBsb3MgZm9ybWF0b3MgZSBpbnN0cnVjdGl2b3MgbcOhcyBjb211bmVzIHV0aWxpemFkb3MgZW4gbGFzIGJyaWdhZGFzIGRlIGVtZXJnZW5jaWE6CiAgICAgIC5jb2wtbGctNQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpLm1iLTQubXQtbGctMAoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlcgogICAgICAucC00LnAtbWQtNQogICAgICAgIFNseWRlckEodGlwbz0iYiIpLmJnLXdoaXRlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy9zbGlkZXItMS5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBIb2phIGRlIHZpZGEgZGVsIGJyaWdhZGlzdGEKICAgICAgICAgICAgICBwIEVsIGZvcm1hdG8gZGUgaG9qYSBkZSB2aWRhIGRlIHVuIGJyaWdhZGlzdGEgZXMgdW4gZG9jdW1lbnRvIHF1ZSByZXN1bWUgbGEgZXhwZXJpZW5jaWEsIGhhYmlsaWRhZGVzIHkgZm9ybWFjacOzbiBkZSB1bmEgcGVyc29uYSBxdWUgc2UgaGEgY2FwYWNpdGFkbyBvIHRyYWJhamEgZW4gw6FyZWFzIHJlbGFjaW9uYWRhcyBjb24gbGEgcHJldmVuY2nDs24geSBhdGVuY2nDs24gZGUgZW1lcmdlbmNpYXMsIGNvbW8gYnJpZ2FkYXMgZGUgZW1lcmdlbmNpYSwgYnJpZ2FkYXMgZGUgc2FsdWQsIGVudHJlIG90cmFzLiBFc3RlIHRpcG8gZGUgaG9qYSBkZSB2aWRhIHB1ZWRlIHNlciB1dGlsaXphZGEgcGFyYSBwb3N0dWxhcnNlIGEgdHJhYmFqb3MsIGN1cnNvcyBvIHByb2dyYW1hcyByZWxhY2lvbmFkb3MgY29uIGxhIGdlc3Rpw7NuIGRlIHJpZXNnb3MsIGxhIHNlZ3VyaWRhZCB5IGxhIGF0ZW5jacOzbiBhIGRlc2FzdHJlcy4KCiAgICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9IVl9CcmlnYWRpc3Rhcy54bHN4JykiIHRhcmdldD0iX2JsYW5rIikoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgICAgICAgLmFuZXhvX19pY29ubyg6c3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6ICcjRkNERkRCJ30iKQogICAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgICAgICAgcCA8c3Ryb25nPkFuZXhvLiA8L3N0cm9uZz4gSG9qYSBkZSB2aWRhIGRlbCBicmlnYWRpc3RhCgoKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy9zbGlkZXItMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBGb3JtYXRvIGRlIGFjdGl2YWNpw7NuIGRlIGxhIGJyaWdhZGEKICAgICAgICAgICAgICBwIEVzdGUgZm9ybWF0byBzZSB1dGlsaXphIGN1YW5kbyBzZSBhY3RpdmEgbGEgYnJpZ2FkYSBhbnRlIHVuYSBlbWVyZ2VuY2lhLiBQZXJtaXRlIGRvY3VtZW50YXIgZWwgbW9tZW50byBlbiBxdWUgc2UgcmVjaWJlIGxhIGFsZXJ0YSwgbGEgaWRlbnRpZmljYWNpw7NuIGRlbCBpbmNpZGVudGUsIGVsIGVxdWlwbyBkZSBicmlnYWRhIGFjdGl2YWRvIHkgbG9zIHJlY3Vyc29zIHJlcXVlcmlkb3MuIFRhbWJpw6luIHNlIGluY2x1eWVuIGxvcyBub21icmVzIGRlIGxvcyBtaWVtYnJvcyBkZSBsYSBicmlnYWRhIHF1ZSBoYW4gc2lkbyBjb252b2NhZG9zIHkgc3UgZGlzcG9uaWJpbGlkYWQuCgogICAgICAgICAgICAgIHAgRWxlbWVudG9zIGNsYXZlczoKCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgRmVjaGEgeSBob3JhIGRlIGFjdGl2YWNpw7NuLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBUaXBvIGRlIGVtZXJnZW5jaWEgKGluY2VuZGlvLCBhY2NpZGVudGUsIGRlc2FzdHJlIG5hdHVyYWwsIGV0Yy4pLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBFcXVpcG8gZGUgYnJpZ2FkaXN0YXMgYXNpZ25hZG9zLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBSZWN1cnNvcyB5IGVxdWlwb3MgcmVxdWVyaWRvcy4KICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgQWNjaW9uZXMgaW5tZWRpYXRhcyBwYXJhIHRvbWFyLgoKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy9zbGlkZXItMy5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBJbmZvcm1lIGRlIGxhIGV2YWx1YWNpw7NuIGluaWNpYWwKICAgICAgICAgICAgICBwIEVzdGUgZm9ybWF0byBzZSBsbGVuYSBhbCBsbGVnYXIgYWwgbHVnYXIgZGUgbGEgZW1lcmdlbmNpYSB5IHNlIHV0aWxpemEgcGFyYSBkb2N1bWVudGFyIGxhIGV2YWx1YWNpw7NuIHByZWxpbWluYXIgZGUgbGEgc2l0dWFjacOzbi4gU2lydmUgcGFyYSBpZGVudGlmaWNhciBlbCB0aXBvIGRlIGVtZXJnZW5jaWEsIGxvcyByaWVzZ29zIGlubWVkaWF0b3MsIGxhcyB2w61jdGltYXMgeSBsYSBwcmlvcmlkYWQgZGUgbGFzIGFjY2lvbmVzIGEgdG9tYXIuIEVzIGZ1bmRhbWVudGFsIHBhcmEgZGVjaWRpciBlbCBkZXNwbGllZ3VlIGRlIHJlY3Vyc29zIHkgZXF1aXBvcy4KCiAgICAgICAgICAgICAgcCBFbGVtZW50b3MgY2xhdmVzOgoKICAgICAgICAgICAgICB1bC5saXN0YS11bAogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwY2nDs24gZGV0YWxsYWRhIGRlIGxhIGVtZXJnZW5jaWEuCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IEV2YWx1YWNpw7NuIGRlIHJpZXNnb3MgaW5tZWRpYXRvcy4KICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgQ29uZGljaW9uZXMgZGVsIGVudG9ybm8gKGNsaW1hLCBhY2Nlc2liaWxpZGFkLCBlc3RydWN0dXJhcyBhZmVjdGFkYXMpLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBOw7ptZXJvIGRlIHbDrWN0aW1hcyB5IHN1IGVzdGFkby4KICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgUHJpb3JpZGFkZXMgZGUgaW50ZXJ2ZW5jacOzbi4KCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvc2xpZGVyLTQucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgRm9ybWF0byBkZSBkZXNwbGllZ3VlIGRlIGVxdWlwb3MgeSByZWN1cnNvcwogICAgICAgICAgICAgIHAgRXN0ZSBmb3JtYXRvIGVzIHV0aWxpemFkbyBwYXJhIHJlZ2lzdHJhciBsYSBhc2lnbmFjacOzbiBkZSBlcXVpcG9zIHkgcmVjdXJzb3MgZHVyYW50ZSBsYSBlbWVyZ2VuY2lhLiBQZXJtaXRlIGEgbGEgYnJpZ2FkYSBsbGV2YXIgdW4gY29udHJvbCBjbGFybyBkZSBsb3MgcmVjdXJzb3MgcXVlIGVzdMOhbiBzaWVuZG8gdXRpbGl6YWRvcywgYXNlZ3VyYW5kbyBxdWUgdG9kb3MgbG9zIG1hdGVyaWFsZXMgeSBoZXJyYW1pZW50YXMgZXN0w6luIGRpc3BvbmlibGVzIHkgb3BlcmF0aXZvcyBlbiB0b2RvIG1vbWVudG8uCgogICAgICAgICAgICAgIHAgRWxlbWVudG9zIGNsYXZlczoKCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgTGlzdGEgZGUgZXF1aXBvcyB5IHJlY3Vyc29zIGRpc3BvbmlibGVzLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBBc2lnbmFjacOzbiBkZSBlcXVpcG9zIGEgYnJpZ2FkaXN0YXMuCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IEVzdGFkbyBkZSBsb3MgZXF1aXBvcyAob3BlcmF0aXZvcyBvIGZ1ZXJhIGRlIHNlcnZpY2lvKS4KICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgUmVwb3NpY2nDs24gbyBzb2xpY2l0dWQgZGUgbnVldm9zIHJlY3Vyc29zIHNpIGVzIG5lY2VzYXJpby4KCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvc2xpZGVyLTUucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgQWN0YSBkZSBjb25mb3JtYWNpw7NuIGRlIGJyaWdhZGEgZGUgZW1lcmdlbmNpYQogICAgICAgICAgICAgIHAgRWwgYWN0YSBkZSBjb25mb3JtYWNpw7NuIGRlIGJyaWdhZGFzIGRlIGVtZXJnZW5jaWEgZXMgdW4gZG9jdW1lbnRvIG9maWNpYWwgcXVlIHNlIHV0aWxpemEgcGFyYSByZWdpc3RyYXIgbGEgY3JlYWNpw7NuIHkgZWwgZXN0YWJsZWNpbWllbnRvIGRlIHVuYSBicmlnYWRhIGRlIGVtZXJnZW5jaWEgZW4gdW5hIG9yZ2FuaXphY2nDs24sIGNvbXVuaWRhZCBvIGluc3RpdHVjacOzbi4gRXN0ZSB0aXBvIGRlIGFjdGEgZXMgZnVuZGFtZW50YWwgcGFyYSBmb3JtYWxpemFyIGxhIGVzdHJ1Y3R1cmEgZGUgbGEgYnJpZ2FkYSwgZGVmaW5pciBzdXMgb2JqZXRpdm9zLCBmdW5jaW9uZXMgeSByZXNwb25zYWJpbGlkYWRlcywgeSBhc2VndXJhciBxdWUgdG9kb3MgbG9zIG1pZW1icm9zIGVzdMOpbiBhbCB0YW50byBkZSBzdSBwYXJ0aWNpcGFjacOzbiB5IGNvbXByb21pc28uIEVzdGUgZG9jdW1lbnRvIGVzIGNsYXZlLCBwb3JxdWUgZGVudHJvIGRlIGxhIHJlc29sdWNpw7NuIDAzMTIgZGVsIDIwMTksIHBvciBlbCBjdWFsIHNlIHJlZ3VsYSBsb3MgZXN0w6FuZGFyZXMgbcOtbmltb3MgZW4gc2VndXJpZGFkIHkgc2FsdWQgZW4gZWwgdHJhYmFqbywgc2UgZW5jdWVudHJhIGVuIGxhIGxpc3RhIGRlIGNoZXF1ZW8gZGVsIG1pbmlzdGVyaW8gZGUgdHJhYmFqbyBleGlnaWVuZG8gZW4gbGEgZW1wcmVzYSBjb24gdW4gY3VtcGxpbWllbnRvIG9ibGlnYXRvcmlvLiAoVmVyIGFuZXhvKSAgCgogICAgICAgICAgICAgIGEuYW5leG8ubWItNC5iZy13aGl0ZS53LWZpdCg6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvQ29uZm9ybWFjaW9uX2RlX2JyaWdhZGEuZG9jeCcpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAgIC5hbmV4b19faWNvbm8oOnN0eWxlPSJ7J2JhY2tncm91bmQtY29sb3InOiAnI0ZDREZEQid9IikKICAgICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8tcGRmLnN2ZyIpCiAgICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICAgIHAgPHN0cm9uZz5BbmV4by4gPC9zdHJvbmc+IENvbmZvcm1hY2nDs24gZGUgYnJpZ2FkYQoKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy9zbGlkZXItNi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBBY3RhIG8gZm9ybWF0byBlbnRyZWdhIGRlIGRvdGFjacOzbiBkZSBicmlnYWRhIGRlIGVtZXJnZW5jaWEKICAgICAgICAgICAgICBwIEVsIGZvcm1hdG8gZGUgZW50cmVnYSBkZSBkb3RhY2nDs24gcGFyYSB1bmEgYnJpZ2FkYSBkZSBlbWVyZ2VuY2lhIGVzIHVuIGRvY3VtZW50byBxdWUgc2UgdXRpbGl6YSBwYXJhIHJlZ2lzdHJhciB5IGZvcm1hbGl6YXIgbGEgZW50cmVnYSBkZSBlcXVpcG9zLCBoZXJyYW1pZW50YXMsIHVuaWZvcm1lcyB5IG90cm9zIG1hdGVyaWFsZXMgbmVjZXNhcmlvcyBwYXJhIGVsIGZ1bmNpb25hbWllbnRvIGRlIHVuYSBicmlnYWRhIGRlIGVtZXJnZW5jaWEuIEVzdGUgdGlwbyBkZSBicmlnYWRhcyBzdWVsZW4gZXN0YXIgY29tcHVlc3RhcyBwb3IgcGVyc29uYWwgY2FwYWNpdGFkbyBwYXJhIHJlc3BvbmRlciBhIHNpdHVhY2lvbmVzIGRlIGVtZXJnZW5jaWEsIGNvbW8gaW5jZW5kaW9zLCBkZXNhc3RyZXMgbmF0dXJhbGVzIG8gYWNjaWRlbnRlcy4KCiAgICAgICAgICAgICAgcCBFc3RlIGRvY3VtZW50byBlcyBpbXBvcnRhbnRlIHBhcmEgbGxldmFyIHVuIGNvbnRyb2wgYWRlY3VhZG8gZGUgbG9zIHJlY3Vyc29zIGRpc3BvbmlibGVzIHkgZ2FyYW50aXphciBxdWUgZWwgcGVyc29uYWwgZXN0w6kgZGViaWRhbWVudGUgZXF1aXBhZG8gcGFyYSBlbmZyZW50YXIgZW1lcmdlbmNpYXMgZGUgbWFuZXJhIGVmZWN0aXZhLiAoVmVyIGFuZXhvKSAgCgogICAgICAgICAgICAgIGEuYW5leG8ubWItNC5iZy13aGl0ZS53LWZpdCg6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvRW50cmVnYV9kZV9kb3RhY2lvbl9kZV9icmlnYWRpc3Rhcy5kb2N4JykiIHRhcmdldD0iX2JsYW5rIikoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgICAgICAgLmFuZXhvX19pY29ubyg6c3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6ICcjRkNERkRCJ30iKQogICAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgICAgICAgcCA8c3Ryb25nPkFuZXhvLiA8L3N0cm9uZz4gRm9ybWF0byBlbnRyZWdhIGRlIGRvdGFjacOzbiBkZSBicmlnYWRhIGRlIGVtZXJnZW5jaWEKCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvc2xpZGVyLTcucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgRm9ybWF0byBwYXJhIGVsIGNvbnRyb2wgZGUgdsOtY3RpbWFzCiAgICAgICAgICAgICAgcCBFc3RlIGZvcm1hdG8gc2UgdXRpbGl6YSBwYXJhIGxsZXZhciB1biByZWdpc3RybyBkZSBsYXMgdsOtY3RpbWFzIGR1cmFudGUgdW5hIGVtZXJnZW5jaWEuIFBlcm1pdGUgYW5vdGFyIGVsIGVzdGFkbyBkZSBjYWRhIHBlcnNvbmEgYXRlbmRpZGEsIGxhIG5hdHVyYWxlemEgZGUgbGFzIGxlc2lvbmVzLCBlbCB0cmF0YW1pZW50byByZWNpYmlkbyB5IHN1IGV2YWN1YWNpw7NuLCBzaSBjb3JyZXNwb25kZS4gRXMgaW1wb3J0YW50ZSBwYXJhIGdhcmFudGl6YXIgcXVlIHRvZGFzIGxhcyB2w61jdGltYXMgc2VhbiBsb2NhbGl6YWRhcywgYXRlbmRpZGFzIHkgZXZhY3VhZGFzIGRlIG1hbmVyYSBvcmRlbmFkYS4KCiAgICAgICAgICAgICAgcCBFbGVtZW50b3MgY2xhdmVzOgoKICAgICAgICAgICAgICB1bC5saXN0YS11bAogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBOb21icmUgZGUgbGEgdsOtY3RpbWEgKHNpIGVzIHBvc2libGUpLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwY2nDs24gZGUgbGVzaW9uZXMgbyBjb25kaWNpb25lcyBtw6lkaWNhcy4KICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgVHJhdGFtaWVudG8gaW5pY2lhbCBhZG1pbmlzdHJhZG8uCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IFRpZW1wbyBkZSBldmFjdWFjacOzbiBvIHRyYXNsYWRvLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBEZXN0aW5vIGRlIGxhIHbDrWN0aW1hIChob3NwaXRhbCwgY2VudHJvIGRlIGF0ZW5jacOzbiwgZXRjLikuCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzL3NsaWRlci04LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IEluc3RydWN0aXZvIGRlIHNlZ3VyaWRhZCBwYXJhIGJyaWdhZGlzdGFzCiAgICAgICAgICAgICAgcCBFc3RlIGluc3RydWN0aXZvIGNvbnRpZW5lIGxhcyBub3JtYXMgeSBwcm9jZWRpbWllbnRvcyBkZSBzZWd1cmlkYWQgcXVlIGRlYmVuIHNlZ3VpciBsb3MgbWllbWJyb3MgZGUgbGEgYnJpZ2FkYSBhbnRlcywgZHVyYW50ZSB5IGRlc3B1w6lzIGRlIGxhIGVtZXJnZW5jaWEuIEVzdMOhIGRpc2XDsWFkbyBwYXJhIGdhcmFudGl6YXIgcXVlIGxvcyBicmlnYWRpc3RhcyBzZSBtYW50ZW5nYW4gcHJvdGVnaWRvcyBkdXJhbnRlIGxhIGludGVydmVuY2nDs24sIG1pbmltaXphbmRvIHJpZXNnb3MgeSBhY2NpZGVudGVzLgoKICAgICAgICAgICAgICBwIEVsZW1lbnRvcyBjbGF2ZXM6CgogICAgICAgICAgICAgIHVsLmxpc3RhLXVsCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IFVzbyBkZSBlcXVpcG8gZGUgcHJvdGVjY2nDs24gcGVyc29uYWwgKEVQUCkuCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IFByb2NlZGltaWVudG9zIHBhcmEgbWFuZWphciBtYXRlcmlhbGVzIHBlbGlncm9zb3MuCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IFByb3RvY29sb3MgZGUgY29tdW5pY2FjacOzbiB5IHNlw7FhbGl6YWNpw7NuLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBBY2Npb25lcyBwYXJhIHNlZ3VpciBlbiBjYXNvIGRlIGxlc2lvbmVzIG8gYWNjaWRlbnRlcyBkZW50cm8gZGUgbGEgYnJpZ2FkYS4KICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgUHJvY2VkaW1pZW50b3MgcGFyYSBldmFjdWFyIGJyaWdhZGlzdGFzIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpby4KCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzL3NsaWRlci05LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IFBsYW4gZGUgZW1lcmdlbmNpYQogICAgICAgICAgICAgIHAgRXN0ZSBlcyB1biBkb2N1bWVudG8gY2xhdmUgcXVlIGRlc2NyaWJlIGxhcyBlc3RyYXRlZ2lhcywgcnV0YXMgZGUgZXZhY3VhY2nDs24geSBhc2lnbmFjacOzbiBkZSByZXNwb25zYWJpbGlkYWRlcyBlbiBjYXNvIGRlIHVuYSBlbWVyZ2VuY2lhLiBBdW5xdWUgZXMgdW4gZm9ybWF0byBxdWUgc2UgcHJlcGFyYSBhbnRlcyBxdWUgb2N1cnJhIHVuYSBlbWVyZ2VuY2lhLCBlcyB1bmEgaGVycmFtaWVudGEgYWN0aXZhIHF1ZSBndcOtYSBsYSBpbnRlcnZlbmNpw7NuIHkgbGEgcmVzcHVlc3RhIGFudGUgc2l0dWFjaW9uZXMgY3LDrXRpY2FzLgoKICAgICAgICAgICAgICBwIEVsZW1lbnRvcyBjbGF2ZXM6CgogICAgICAgICAgICAgIHVsLmxpc3RhLXVsCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IERlc2NyaXBjacOzbiBkZSBsb3MgZXNjZW5hcmlvcyBwb3NpYmxlcyBkZSBlbWVyZ2VuY2lhLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBSdXRhcyBkZSBldmFjdWFjacOzbiB5IHB1bnRvcyBkZSByZXVuacOzbi4KICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgUm9sZXMgeSByZXNwb25zYWJpbGlkYWRlcyBkZSBjYWRhIG1pZW1icm8gZGUgbGEgYnJpZ2FkYS4KICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgUHJvY2VkaW1pZW50b3MgZGUgY29tdW5pY2FjacOzbi4KICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgUGxhbmVzIGRlIGNvbnRpbmdlbmNpYSBwYXJhIHNpdHVhY2lvbmVzIGltcHJldmlzdGFzLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTIKICAgICAgLnB4LTQucHgtbWQtNS5weS00CiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8yLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMCBBcGFydGUgZGUgbG9zIGZvcm1hdG9zLCBhY3RhcyB5IGV2aWRlbmNpYXMgZG9jdW1lbnRhbGVzIHF1ZSBhY2FiYW1vcyBkZSB2ZXIsIGV4aXN0ZW4gb3Ryb3MgZm9ybWF0b3MgcXVlIHNlIHB1ZWRlbiBhZGFwdGFyIGFsIGZ1bmNpb25hbWllbnRvIGRlIGxhIGJyaWdhZGEsIHRvZG8gZGVwZW5kZXLDoSBkZWwgbWFuZWpvIHF1ZSBzZSBsZSBicmluZGUgZGVzZGUgZWwgU2lzdGVtYSBkZSBnZXN0acOzbiBkZSBzZWd1cmlkYWQgeSBzYWx1ZCBlbiBlbCB0cmFiYWpvIGRlIGNhZGEgY29tcGHDscOtYS4KICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5hY3RpdmlkYWQuYmctY29sb3ItYWN0aXZpZGFkCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgI0FjdGl2aWRhZCAgICAgICAgICAgICAgICAKICAgICAgICAgIDxBY3RpdmlkYWQgOmN1ZXN0aW9uYXJpbz0iY3Vlc3Rpb25hcmlvIi8+CiAgICAgICAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2xjL3RlY25vbG9naWNhZGVsb3JpZW50ZS90aXR1bG9zLzUxOTI1IiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgU2FuIEphaW1lLCBBLiAoMjAxMSkuIEFjdHVhY2lvbmVzIGLDoXNpY2FzIGVuIGVtZXJnZW5jaWFzLCBldmFjdWFjacOzbiB5IGF1dG9wcm90ZWNjacOzbjogY8OzbW8gYWN0dWFyIGFudGUgc2l0dWFjaW9uZXMgZGUgZW1lcmdlbmNpYSB5IGVudGVuZGVyIGxvcyBwbGFuZXMgZGUgYXV0b3Byb3RlY2Npw7NuOiAoIGVkLikuIEVkaXRvcmlhbCBUw6liYXIgRmxvcmVzLiAKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9UW1uaEVWNjk2Z3MiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBQUkVWRU5DSU9TTyBDb21wYcOxw61hIFJzbyBzLmEuICgyMDIxLCAxNSBhYnJpbCkuIMKrUHJlcGFyYWNpw7NuIHBhcmEgZW1lcmdlbmNpYXMgZW4gbGFzIGVtcHJlc2EuIFBvciBxdcOpIGxhIHBhbmRlbWlhIG5vIGVzIGVsIMO6bmljbyByaWVzZ2/CuwoKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQo="},null]}