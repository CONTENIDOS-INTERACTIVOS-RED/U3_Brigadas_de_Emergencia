{"remainingRequest":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/src/views/curso/Tema1.vue?vue&type=template&id=2034ac11&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/src/views/curso/Tema1.vue","mtime":1740291062927},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Brigadas_de_Emergencia/U3_Brigadas_de_Emergencia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gRXZpZGVuY2lhcyBkb2N1bWVudGFsZXMnIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnAtNC5wLW1kLTUub3ZlcmZsb3ctaGlkZGVuCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBMYSBhZGVjdWFkYSBnZXN0acOzbiBkZSBlbWVyZ2VuY2lhcyByZXF1aWVyZSB1biBzw7NsaWRvIHJlc3BhbGRvIGRvY3VtZW50YWwgcXVlIGdhcmFudGljZSBsYSBlZmljYWNpYSBkZSBjYWRhIGludGVydmVuY2nDs24gcmVhbGl6YWRhLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTcubWItbGctNQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMS5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAuY29sLWxnLTgKICAgICAgICAgICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIEV2aWRlbmNpYXMgZG9jdW1lbnRhbGVzIAogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFbiBlbCBQREYgRXZpZGVuY2lhcyBkb2N1bWVudGFsZXMsIHNlIGV4cGxvcmFuIGxvcyBwcmluY2lwYWxlcyByZWdpc3Ryb3MgeSBkb2N1bWVudG9zIHF1ZSBhc2VndXJhbiBsYSB0cmF6YWJpbGlkYWQgZGUgbGFzIGFjY2lvbmVzLCBkZXNkZSBpbmZvcm1lcyBkZSBjYXBhY2l0YWNpw7NuIGhhc3RhIHBsYW5lcyBkZSBlbWVyZ2VuY2lhIGFjdHVhbGl6YWRvcy4gRXN0b3MgZWxlbWVudG9zIG5vIHNvbG8gcGVybWl0ZW4gZXZhbHVhciBlbCBkZXNlbXBlw7FvIG9wZXJhdGl2byBkZSBsYXMgYnJpZ2FkYXMsIHNpbm8gcXVlIHRhbWJpw6luIHByb3BvcmNpb25hbiB1bmEgYmFzZSBwYXJhIGxhIG1lam9yYSBjb250aW51YSBkZSBwcm90b2NvbG9zIHkgZXN0cmF0ZWdpYXMsIGdhcmFudGl6YW5kbyBsYSBzZWd1cmlkYWQgZGUgbGFzIHBlcnNvbmFzIHkgZWwgY3VtcGxpbWllbnRvIGRlIGxhIG5vcm1hdGl2YSB2aWdlbnRlLgoKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b18xLnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwIDxzdHJvbmc+QW5leG8uIDwvc3Ryb25nPiBFdmlkZW5jaWFzIGRvY3VtZW50YWxlcwoKICAgICN0XzFfMS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjFdIENhcGFjaXRhY2nDs24geSBlbnRyZW5hbWllbnRvCgogICAgLnJvdy5tYi00CiAgICAgIC5jb2wtbGctOAogICAgICAgIC5iZy1jb2xvci0xLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydAogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgRWwgZGlzZcOxbyBkZSBwcm9ncmFtYXMgZGUgY2FwYWNpdGFjacOzbiBwYXJhIGJyaWdhZGFzIGRlIGVtZXJnZW5jaWEgc2UgY29udmllcnRlIGVuIHVuYSB0YXJlYSBlc2VuY2lhbC4gRXN0YXMgYnJpZ2FkYXMsIGNvbXB1ZXN0YXMgcG9yIGluZGl2aWR1b3MgZW50cmVuYWRvcyB5IGNvbXByb21ldGlkb3MsIHNvbiBlbCBwcmltZXIgZnJlbnRlIGRlIHJlc3B1ZXN0YSBhbnRlIGNyaXNpcywgeSBzdSBlZmVjdGl2aWRhZCBkZXBlbmRlIGVuIGdyYW4gbWVkaWRhIGRlIGxhIGZvcm1hY2nDs24gcXVlIHJlY2liZW4uCgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgRWwgZGVzYXJyb2xsbyBkZSBwcm9ncmFtYXMgZGUgY2FwYWNpdGFjacOzbiBlc3BlY8OtZmljb3MgcGVybWl0ZSBubyBzb2xvIGRvdGFyIGEgbG9zIG1pZW1icm9zIGRlIGxhcyBicmlnYWRhcyBkZSBoYWJpbGlkYWRlcyB0w6ljbmljYXMgeSB0w6FjdGljYXMsIHNpbm8gdGFtYmnDqW4gZm9tZW50YXIgY29tcGV0ZW5jaWFzIGVuIGxpZGVyYXpnbywgdHJhYmFqbyBlbiBlcXVpcG8geSB0b21hIGRlIGRlY2lzaW9uZXMgYmFqbyBwcmVzacOzbi4gVW4gZGlzZcOxbyBiaWVuIGVzdHJ1Y3R1cmFkbyB5IGFkYXB0YWRvIGEgbGFzIG5lY2VzaWRhZGVzIHBhcnRpY3VsYXJlcyBkZSBjYWRhIGNvbXVuaWRhZCBvIGluc3RpdHVjacOzbiBwdWVkZSBtYXJjYXIgbGEgZGlmZXJlbmNpYSBlbnRyZSB1bmEgcmVzcHVlc3RhIGVmaWNheiB5IHVuYSBnZXN0acOzbiBkZSBjcmlzaXMgaW5lZmljaWVudGUuCgogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzMucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQoKCiAgICAjdF8xXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4yXSBFdmFsdWFjacOzbiBkZSBuZWNlc2lkYWRlcwoKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgUGFyYSBjb25vY2VyIHNvYnJlIGVzdGEgdGVtw6F0aWNhLCBsbyBpbnZpdGFtb3MgYSBlc2N1Y2hhciBlbCBzaWd1aWVudGUgcG9kY2FzdC4KCiAgICAuYmctZnVsbC13aWR0aC5tYi01CiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzQucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgLmNvbC1sZy02CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgVGFyamV0YUF1ZGlvLmNvbG9yLWFjZW50by1ib3RvbmVzLmJnLWNvbG9yLXdoaXRlLm1iLTMoCiAgICAgICAgICAgICAgdGV4dG89IkV2YWx1YWNpw7NuIGRlIG5lY2VzaWRhZGVzIgogICAgICAgICAgICAgIHRpZW1wbwogICAgICAgICAgICAgIDphdWRpbz0icmVxdWlyZSgnLi4vLi4vYXNzZXRzL2N1cnNvL3BvZGNhc3QvcG9kY2FzdDEubXAzJykiCiAgICAgICAgICAgICkKICAgIAogICAgI3RfMV8zLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDEuM10gT2JqZXRpdm9zIGRlIGNhcGFjaXRhY2nDs24KCiAgICAucm93Lm1iLTQKICAgICAgLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTcucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00CiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzUuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBVbmEgdmV6IHF1ZSBzZSBoYSBjb21wbGV0YWRvIGxhIGV2YWx1YWNpw7NuIGRlIG5lY2VzaWRhZGVzLCBlbCBzaWd1aWVudGUgcGFzbyBjcnVjaWFsIGVuIGVsIGRlc2Fycm9sbG8gZGUgdW4gcHJvZ3JhbWEgZGUgY2FwYWNpdGFjacOzbiBlcyBlc3RhYmxlY2VyIG9iamV0aXZvcyBjbGFyb3MgeSBtZWRpYmxlcyBxdWUgZ3XDrWVuIGVsIHByb2Nlc28gZm9ybWF0aXZvLiBFc3RvcyBvYmpldGl2b3MgZGViZW4gZXN0YXIgYWxpbmVhZG9zIGNvbiBsb3MgZGVzYWbDrW9zIGVzcGVjw61maWNvcyBxdWUgZW5mcmVudGEgbGEgYnJpZ2FkYSB5IHNlciBhbGNhbnphYmxlcyBkZW50cm8gZGUgdW4gbWFyY28gdGVtcG9yYWwgcmF6b25hYmxlLiAKCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBMYSBmb3JtdWxhY2nDs24gZGUgb2JqZXRpdm9zIGJpZW4gZGVmaW5pZG9zIG5vIHNvbG8gZmFjaWxpdGEgbGEgcGxhbmlmaWNhY2nDs24gZWZlY3RpdmEgZGUgbGFzIGFjdGl2aWRhZGVzIGRlIGNhcGFjaXRhY2nDs24sIHNpbm8gcXVlIHRhbWJpw6luIHBlcm1pdGUgbGEgZXZhbHVhY2nDs24gZGUgc3UgaW1wYWN0byB5IGVmZWN0aXZpZGFkIGEgbG8gbGFyZ28gZGVsIHRpZW1wby4gQSBjb250aW51YWNpw7NuLCBzZSBwcmVzZW50YW4gZWplbXBsb3MgZGV0YWxsYWRvcyBkZSBvYmpldGl2b3MgZGUgY2FwYWNpdGFjacOzbiBxdWUgcHVlZGVuIHNlciBpbXBsZW1lbnRhZG9zOgoKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS82LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKCgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tc2xpZGVyCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3NsaWRlci0xLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IE1lam9yYXIgZWwgdGllbXBvIGRlIHJlc3B1ZXN0YSBhbnRlIGVtZXJnZW5jaWFzCiAgICAgICAgICAgICAgcCBMYSByZWR1Y2Npw7NuIGRlbCB0aWVtcG8gZGUgcmVzcHVlc3RhIGVuIHNpdHVhY2lvbmVzIGNyw610aWNhcywgZXMgZXNlbmNpYWwgcGFyYSBzYWx2YXIgdmlkYXMgeSBtaW5pbWl6YXIgZWwgaW1wYWN0byBkZSBsb3MgaW5jaWRlbnRlcy4gVW4gb2JqZXRpdm8gZXNwZWPDrWZpY28gZGVudHJvIGRlIGVzdGUgw6FtYml0bywgcG9kcsOtYSBzZXIgZGlzbWludWlyIGVsIHRpZW1wbyBwcm9tZWRpbyBlbnRyZSBsYSByZWNlcGNpw7NuIGRlIGxhIGFsZXJ0YSB5IGxhIGxsZWdhZGEgYWwgbHVnYXIgZGUgbGEgZW1lcmdlbmNpYSBlbiB1biAyMCAlLCBlbiB1biBwbGF6byBkZSBzZWlzIG1lc2VzLiBQYXJhIGxvZ3JhciBlc3RvLCBzZSBwdWVkZW4gbGxldmFyIGEgY2FibyBzZXNpb25lcyBkZSBjYXBhY2l0YWNpw7NuIGVuZm9jYWRhcyBlbiBsYSBtZWpvcmEgZGUgbGEgZWZpY2llbmNpYSBvcGVyYXRpdmEsIHF1ZSBpbmNsdXlhIHNpbXVsYWNyb3MgeSBlbnRyZW5hbWllbnRvcyBwcsOhY3RpY29zIHNvYnJlIGVsIGNvbm9jaW1pZW50byBkZSBydXRhcyBhbHRlcm5hcyB5IGxhIG9wdGltaXphY2nDs24gZGUgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVuIHNpdHVhY2lvbmVzIGRlIGFsdGEgcHJlc2nDs24uIEFkZW3DoXMsIHNlIHB1ZWRlbiBpbXBsZW1lbnRhciB0ZWNub2xvZ8OtYXMgZGUgY29tdW5pY2FjacOzbiBxdWUgcGVybWl0YW4gdW4gZmx1am8gZGUgaW5mb3JtYWNpw7NuIG3DoXMgcsOhcGlkbyB5IGVmZWN0aXZvLgoKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS9zbGlkZXItMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBJbmNyZW1lbnRhciBsYSBjYXBhY2lkYWQgZGUgZXZhbHVhY2nDs24gZGUgcmllc2dvcwogICAgICAgICAgICAgIHAgTGEgaGFiaWxpZGFkIHBhcmEgaWRlbnRpZmljYXIgeSBldmFsdWFyIHJpZXNnb3MgZGUgbWFuZXJhIHLDoXBpZGEgeSBwcmVjaXNhIGR1cmFudGUgdW5hIGVtZXJnZW5jaWEgZXMgZnVuZGFtZW50YWwgcGFyYSB1bmEgcmVzcHVlc3RhIGVmZWN0aXZhLiBVbiBvYmpldGl2byBkZSBjYXBhY2l0YWNpw7NuIHBvZHLDrWEgc2VyIGNhcGFjaXRhciBhIGxvcyBtaWVtYnJvcyBkZSBsYSBicmlnYWRhIGVuIGxhIHJlYWxpemFjacOzbiBkZSBldmFsdWFjaW9uZXMgcsOhcGlkYXMgZGUgcGVsaWdyb3MgcG90ZW5jaWFsZXMsIGNvbiBlbCBmaW4gZGUgYXVtZW50YXIgc3UgY2FwYWNpZGFkIGRlIHJlc3B1ZXN0YSBhbnRlIGRpZmVyZW50ZXMgZXNjZW5hcmlvcyBkZSBlbWVyZ2VuY2lhLiBFc3RvIGluY2x1eWUgZWwgZW50cmVuYW1pZW50byBlbiBlbCB1c28gZGUgaGVycmFtaWVudGFzIHkgbWV0b2RvbG9nw61hcyBlc3BlY8OtZmljYXMsIGNvbW8gbGEgZXZhbHVhY2nDs24gcHJpbWFyaWEgeSBzZWN1bmRhcmlhIGVuIHVuIGluY2lkZW50ZS4gU2UgcHVlZGVuIG9yZ2FuaXphciB0YWxsZXJlcyBwcsOhY3RpY29zIGRvbmRlIGxvcyBwYXJ0aWNpcGFudGVzIHJlYWxpY2VuIHNpbXVsYWNpb25lcyBkZSBldmFsdWFjacOzbiBkZSByaWVzZ29zIGVuIGRpdmVyc2FzIHNpdHVhY2lvbmVzLCBwcm9tb3ZpZW5kbyBhc8OtIHVuIGFwcmVuZGl6YWplIGFjdGl2byB5IGNvbGFib3JhdGl2by4KCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvc2xpZGVyLTMucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgRm9ydGFsZWNlciBsYSBjb29yZGluYWNpw7NuIGludGVyaW5zdGl0dWNpb25hbAogICAgICAgICAgICAgIHAgRW4gZWwgY29udGV4dG8gZGUgZW1lcmdlbmNpYXMgY29tcGxlamFzLCBlcyB2aXRhbCBxdWUgbGFzIGJyaWdhZGFzIGRlIHJlc2NhdGUgY29sYWJvcmVuIGRlIG1hbmVyYSBlZmVjdGl2YSBjb24gb3Ryb3Mgb3JnYW5pc21vcywgdGFsZXMgY29tbyBjdWVycG9zIGRlIHBvbGljw61hLCBib21iZXJvcyB5IHNlcnZpY2lvcyBtw6lkaWNvcyBkZSBlbWVyZ2VuY2lhLiBVbiBvYmpldGl2byBpbXBvcnRhbnRlIGVuIGVzdGUgw6FtYml0byBzZXLDrWEgbWVqb3JhciBsYSBjYXBhY2lkYWQgZGUgbG9zIG1pZW1icm9zIGRlIGxhIGJyaWdhZGEgcGFyYSBjb211bmljYXJzZSB5IGNvb3JkaW5hcnNlIGVmaWNhem1lbnRlIGNvbiBlc3RhcyBpbnN0aXR1Y2lvbmVzLCBhc2VndXJhbmRvIHF1ZSB0b2RvcyBsb3MgYWN0b3JlcyBpbnZvbHVjcmFkb3MgdHJhYmFqZW4ganVudG9zIGJham8gdW4gbWFuZG8gw7puaWNvIHkgb3JnYW5pemFkby4gUGFyYSBhbGNhbnphciBlc3RlIG9iamV0aXZvLCBzZSBwdWVkZW4gcmVhbGl6YXIgZWplcmNpY2lvcyBkZSBzaW11bGFjacOzbiBjb25qdW50YSB5IHRhbGxlcmVzIGRlIGZvcm1hY2nDs24gZW4gaGFiaWxpZGFkZXMgZGUgY29tdW5pY2FjacOzbiB5IGxpZGVyYXpnbywgZG9uZGUgbG9zIHBhcnRpY2lwYW50ZXMgYXByZW5kYW4gYSBlc3RhYmxlY2VyIHByb3RvY29sb3MgY2xhcm9zIGRlIGNvb3JkaW5hY2nDs24geSBhIHV0aWxpemFyIHNpc3RlbWFzIGRlIGNvbXVuaWNhY2nDs24gaW50ZXJvcGVyYWJsZXMuIEVzdG8gbm8gc29sbyBtZWpvcmFyw6EgbGEgZWZpY2FjaWEgZGUgbGFzIG9wZXJhY2lvbmVzIGVuIGVsIHRlcnJlbm8sIHNpbm8gcXVlIHRhbWJpw6luIGZvbWVudGFyw6EgdW4gYW1iaWVudGUgZGUgY29sYWJvcmFjacOzbiBlbnRyZSBsYXMgZGlmZXJlbnRlcyBvcmdhbml6YWNpb25lcy4KCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvc2xpZGVyLTQucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgRGVzYXJyb2xsYXIgaGFiaWxpZGFkZXMgdMOpY25pY2FzIHkgb3BlcmF0aXZhcyBlc3BlY8OtZmljYXMKICAgICAgICAgICAgICBwIEFkZW3DoXMgZGUgbG9zIG9iamV0aXZvcyBnZW5lcmFsZXMgZGUgcmVzcHVlc3RhIHkgY29vcmRpbmFjacOzbiwgZXMgZnVuZGFtZW50YWwgcXVlIGxvcyBtaWVtYnJvcyBkZSBsYSBicmlnYWRhIGN1ZW50ZW4gY29uIGhhYmlsaWRhZGVzIHTDqWNuaWNhcyB5IG9wZXJhdGl2YXMgZXNwZWPDrWZpY2FzIHBhcmEgbWFuZWphciBlcXVpcGFtaWVudG8geSB0ZWNub2xvZ8OtYSBkZSBlbWVyZ2VuY2lhLiBVbiBvYmpldGl2byBhZGljaW9uYWwgcG9kcsOtYSBzZXIgY2FwYWNpdGFyIGEgbG9zIG1pZW1icm9zIGVuIGVsIHVzbyB5IG1hbnRlbmltaWVudG8gZGUgZXF1aXBvcyBkZSByZXNjYXRlIGF2YW56YWRvcywgY29tbyBlcXVpcG9zIGRlIGNvbXVuaWNhY2nDs24geSBoZXJyYW1pZW50YXMgZGUgYsO6c3F1ZWRhIHkgcmVzY2F0ZS4gTGEgY2FwYWNpdGFjacOzbiBwdWVkZSBpbmNsdWlyIHNlc2lvbmVzIHRlw7NyaWNhcyB5IHByw6FjdGljYXMsIGRvbmRlIHNlIGVuc2XDsWFuIG5vIHNvbG8gbGFzIGZ1bmNpb25lcyBkZWwgZXF1aXBvLCBzaW5vIHRhbWJpw6luIGFzcGVjdG9zIGRlIHNlZ3VyaWRhZCB5IG1hbnRlbmltaWVudG8gcGFyYSBhc2VndXJhciBzdSDDs3B0aW1vIGZ1bmNpb25hbWllbnRvIGVuIHNpdHVhY2lvbmVzIGNyw610aWNhcy4KCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvc2xpZGVyLTUucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgRm9tZW50YXIgbGEgcmVzaWxpZW5jaWEgeSBlbCBiaWVuZXN0YXIgZW1vY2lvbmFsCiAgICAgICAgICAgICAgcCBMYSBjYXBhY2l0YWNpw7NuIHRhbWJpw6luIGRlYmUgYWJvcmRhciBlbCBhc3BlY3RvIGVtb2Npb25hbCB5IHBzaWNvbMOzZ2ljbyBkZSBsb3MgbWllbWJyb3MgZGUgbGEgYnJpZ2FkYSwgcXVpZW5lcyBwdWVkZW4gZW5mcmVudGFyc2UgYSBzaXR1YWNpb25lcyBlc3RyZXNhbnRlcyB5IHRyYXVtw6F0aWNhcy4gVW4gb2JqZXRpdm8gcmVsZXZhbnRlIGVuIGVzdGUgc2VudGlkbyBwb2Ryw61hIHNlciBpbXBsZW1lbnRhciBwcm9ncmFtYXMgZGUgY2FwYWNpdGFjacOzbiBlbiBtYW5lam8gZGVsIGVzdHLDqXMgeSByZXNpbGllbmNpYSwgcXVlIGF5dWRlbiBhIGxvcyBtaWVtYnJvcyBhIGRlc2Fycm9sbGFyIGVzdHJhdGVnaWFzIHBhcmEgYWZyb250YXIgbGEgcHJlc2nDs24gZW1vY2lvbmFsIHF1ZSBjb25sbGV2YSBzdSB0cmFiYWpvLiBFc3RvIHB1ZWRlIGluY2x1aXIgdGFsbGVyZXMgc29icmUgdMOpY25pY2FzIGRlIGF1dG9jdWlkYWRvLCBtYW5lam8gZGUgY3Jpc2lzIHkgYXBveW8gZW1vY2lvbmFsIGVudHJlIGNvbXBhw7Flcm9zLCBwcm9tb3ZpZW5kbyBhc8OtIHVuIGFtYmllbnRlIGRlIHRyYWJham8gc2FsdWRhYmxlIHkgc29saWRhcmlvLgoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0yLm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5weS00CiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS83LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMCBFc3RhYmxlY2VyIG9iamV0aXZvcyBkZSBjYXBhY2l0YWNpw7NuIGNsYXJvcyB5IG1lZGlibGVzLCBlcyB1biBwYXNvIGZ1bmRhbWVudGFsIHBhcmEgZ2FyYW50aXphciBxdWUgbG9zIG1pZW1icm9zIGRlIGxhIGJyaWdhZGEgZXN0w6luIGRlYmlkYW1lbnRlIHByZXBhcmFkb3MgcGFyYSBlbmZyZW50YXIgbG9zIGRlc2Fmw61vcyBkZSBzdSBsYWJvci4gQSB0cmF2w6lzIGRlIHVuIGVuZm9xdWUgaW50ZWdyYWwgcXVlIGFib3JkZSB0YW50byBoYWJpbGlkYWRlcyB0w6ljbmljYXMgY29tbyBhc3BlY3RvcyBkZSBjb29yZGluYWNpw7NuIHkgYmllbmVzdGFyIGVtb2Npb25hbCwgc2UgYnVzY2Egbm8gc29sbyBtZWpvcmFyIGxhIGVmZWN0aXZpZGFkIG9wZXJhdGl2YSwgc2lubyB0YW1iacOpbiBmb21lbnRhciB1biBlcXVpcG8gY29oZXNpb25hZG8geSByZXNpbGllbnRlLCBjYXBheiBkZSBhY3R1YXIgY29uIGVmaWNhY2lhIHkgaHVtYW5pZGFkIGVuIHNpdHVhY2lvbmVzIGRlIGVtZXJnZW5jaWEuIAoKCiAgICAjdF8xXzQudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS40XSBNZXRvZG9sb2fDrWFzIGRlIGNhcGFjaXRhY2nDs24gcGFyYSBicmlnYWRhcyBkZSBlbWVyZ2VuY2lhCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBMYSBjYXBhY2l0YWNpw7NuIGVmZWN0aXZhIGRlIGxhcyBicmlnYWRhcyBkZSBlbWVyZ2VuY2lhIHJlcXVpZXJlIGRlIHVuIGVuZm9xdWUgaW50ZWdyYWwgcXVlIGNvbWJpbmUgZGlmZXJlbnRlcyBtZXRvZG9sb2fDrWFzIHBhcmEgZ2FyYW50aXphciBxdWUgc3VzIG1pZW1icm9zIGVzdMOpbiBwcmVwYXJhZG9zIHBhcmEgcmVzcG9uZGVyIGFudGUgY3VhbHF1aWVyIHNpdHVhY2nDs24gY3LDrXRpY2EuCgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTcubWItbGctNQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvMS5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAuY29sLWxnLTgKICAgICAgICAgICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIE1ldG9kb2xvZ8OtYXMgZGUgY2FwYWNpdGFjacOzbiBwYXJhIGJyaWdhZGFzIGRlIGVtZXJnZW5jaWEgIAogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFbiBlbCBQREYgTWV0b2RvbG9nw61hcyBkZSBjYXBhY2l0YWNpw7NuIHBhcmEgYnJpZ2FkYXMgZGUgZW1lcmdlbmNpYSwgIHNlIHByZXNlbnRhbiBkaXZlcnNvcyBlbmZvcXVlcyBkZSBmb3JtYWNpw7NuIHF1ZSBwZXJtaXRlbiBkZXNhcnJvbGxhciB0YW50byBoYWJpbGlkYWRlcyB0w6ljbmljYXMgY29tbyBjb21wZXRlbmNpYXMgYmxhbmRhcyBuZWNlc2FyaWFzIHBhcmEgdW5hIHJlc3B1ZXN0YSBlZmljYXouIEVzdGFzIG1ldG9kb2xvZ8OtYXMgYWJhcmNhbiBkZXNkZSB0YWxsZXJlcyBwcsOhY3RpY29zIHkgc2ltdWxhY3JvcyBoYXN0YSBlbnRyZW5hbWllbnRvcyBzb2JyZSBlbCB0ZXJyZW5vIHkgZm9ybWFjacOzbiBlbiBsw61uZWEsIGFzZWd1cmFuZG8gcXVlIGxvcyBicmlnYWRpc3RhcyBhZHF1aWVyYW4gY29ub2NpbWllbnRvcyB0ZcOzcmljb3MgeSBwcsOhY3RpY29zIHBhcmEgYWN0dWFyIGRlIG1hbmVyYSByw6FwaWRhLCBlZmljaWVudGUgeSBzZWd1cmEgZW4gc2l0dWFjaW9uZXMgZGUgZW1lcmdlbmNpYS4KCiAgICAgICAgICAgIGEuYW5leG8ubWItNC5iZy13aGl0ZS53LWZpdCg6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvQW5leG9fMi5wZGYnKSIgdGFyZ2V0PSJfYmxhbmsiKShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAgICAgLmFuZXhvX19pY29ubyg6c3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6ICcjRkNERkRCJ30iKQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8tcGRmLnN2ZyIpCiAgICAgICAgICAgICAgLmFuZXhvX190ZXh0bwogICAgICAgICAgICAgICAgcCA8c3Ryb25nPkFuZXhvLiA8L3N0cm9uZz4gTWV0b2RvbG9nw61hcyBkZSBjYXBhY2l0YWNpw7NuIHBhcmEgYnJpZ2FkYXMgZGUgZW1lcmdlbmNpYSAgCgoKICAgICN0XzFfNS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjVdIENvbnRlbmlkb3MgZGUgbGFzIGNhcGFjaXRhY2lvbmVzIHkgZW50cmVuYW1pZW50b3MKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTGFzIGJyaWdhZGFzIGRlIGVtZXJnZW5jaWEgZGViZW4gcmVjaWJpciBjYXBhY2l0YWNpw7NuIGVuIHVuYSBhbXBsaWEgZ2FtYSBkZSDDoXJlYXMgcGFyYSBnYXJhbnRpemFyIHF1ZSBwdWVkYW4gcmVzcG9uZGVyIGFkZWN1YWRhbWVudGUsIGEgZGl2ZXJzYXMgc2l0dWFjaW9uZXMgY3LDrXRpY2FzLiBBIGNvbnRpbnVhY2nDs24sIHNlIGRlc2NyaWJlbiBsb3MgdGVtYXMgY2xhdmVzIGVuIGxvcyBxdWUgZGViZW4gc2VyIGZvcm1hZGFzOgoKICAgICAgICBoMy5tYi00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBQcmltZXJvcyBhdXhpbGlvcyB5IFNvcG9ydGUgVml0YWwgQsOhc2ljbyAoU1ZCKQoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBMYSBmb3JtYWNpw7NuIGVuIHByaW1lcm9zIGF1eGlsaW9zIHkgc29wb3J0ZSB2aXRhbCBiw6FzaWNvIGVzIGxhIHBpZWRyYSBhbmd1bGFyIGRlIGxhIGNhcGFjaXRhY2nDs24gZGUgY3VhbHF1aWVyIGJyaWdhZGEgZGUgZW1lcmdlbmNpYS4gRXN0YSDDoXJlYSBkZSBjb25vY2ltaWVudG8gbm8gc29sbyBjdWJyZSBsYXMgdMOpY25pY2FzIG5lY2VzYXJpYXMgcGFyYSBhdGVuZGVyIGEgcGVyc29uYXMgZW4gc2l0dWFjaW9uZXMgZGUgZW1lcmdlbmNpYSwgc2lubyBxdWUgdGFtYmnDqW4gaW5jbHV5ZSBsYSBjb21wcmVuc2nDs24gZGUgY8OzbW8gZXZhbHVhciB1bmEgc2l0dWFjacOzbiB5IHRvbWFyIGRlY2lzaW9uZXMgcsOhcGlkYXMgeSBlZmVjdGl2YXMuIEFsZ3Vub3MgZGUgbG9zIGFzcGVjdG9zIG3DoXMgcmVsZXZhbnRlcyBzb246CiAgICAgICAgCiAgICAgIC5jb2wtbGctNC5kLW5vbmUuZC1zbS1ibG9jawogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvOC5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpLm1iLTQubWItbGctMAoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci1pbmZvLm1iLTUKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgICAgIC5jb2wtbGctMTAKICAgICAgICAgICAgSW1hZ2VuSW5mb2dyYWZpY2EuY29sb3Itc2VjdW5kYXJpbwogICAgICAgICAgICAgICAgdGVtcGxhdGUodi1zbG90OmltYWdlbikKICAgICAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvaW5mbzEuc3ZnJywgYWx0PScnLCBzdHlsZT0ibWF4LXdpZHRoOiA5NzdweDsiKS5teC1hdXRvCgogICAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjEwLjUlIiB5PSI5Ni41JSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgICAgaDUgVMOpY25pY2FzIGRlIHJlYW5pbWFjacOzbiBjYXJkaW9wdWxtb25hciAoUkNQKQogICAgICAgICAgICAgICAgICBwIExhIFJDUCBlcyB1bmEgbWFuaW9icmEgdml0YWwgcXVlIHB1ZWRlIHNhbHZhciB2aWRhcyBlbiBjYXNvcyBkZSBwYXJvIGNhcmTDrWFjby4gTGEgY2FwYWNpdGFjacOzbiBkZWJlIGluY2x1aXIgdGFudG8gbGEgdMOpY25pY2EgcGFyYSBhZHVsdG9zIGNvbW8gcGFyYSBuacOxb3MgeSBsYWN0YW50ZXMsIGFzw60gY29tbyBsYSBpbXBvcnRhbmNpYSBkZSByZWFsaXphciBsYSBSQ1AgZGUgbWFuZXJhIHLDoXBpZGEgeSBjb250aW51YSBoYXN0YSBxdWUgbGxlZ3VlIGF5dWRhIHByb2Zlc2lvbmFsLgoKICAgICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSIzMCUiIHk9Ijk2LjUlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgICBoNSBNYW5lam8gZGUgaGVyaWRhcywgZnJhY3R1cmFzIHkgcXVlbWFkdXJhcwogICAgICAgICAgICAgICAgICBwIExvcyBicmlnYWRpc3RhcyBkZWJlbiBzZXIgY2FwYWNlcyBkZSBpZGVudGlmaWNhciBsYSBncmF2ZWRhZCBkZSBoZXJpZGFzLCBmcmFjdHVyYXMgeSBxdWVtYWR1cmFzLiBFc3RvIGltcGxpY2Egbm8gc29sbyBsYSBhcGxpY2FjacOzbiBkZSB0w6ljbmljYXMgYWRlY3VhZGFzIHBhcmEgc3UgdHJhdGFtaWVudG8sIGNvbW8gZWwgdXNvIGRlIHZlbmRhamVzLCBpbm1vdmlsaXphY2nDs24gZGUgZXh0cmVtaWRhZGVzIGZyYWN0dXJhZGFzIHkgZWwgZW5mcmlhbWllbnRvIGRlIHF1ZW1hZHVyYXMsIHNpbm8gdGFtYmnDqW4gbGEgY2FwYWNpZGFkIGRlIGV2YWx1YXIgc2kgc2UgcmVxdWllcmUgYXRlbmNpw7NuIG3DqWRpY2EgYWRpY2lvbmFsLgoKICAgICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI1MCUiIHk9Ijk2LjUlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgICBoNSBDb250cm9sIGRlIGhlbW9ycmFnaWFzIHkgYXBsaWNhY2nDs24gZGUgdmVuZGFqZXMKICAgICAgICAgICAgICAgICAgcCBTYWJlciBjw7NtbyBjb250cm9sYXIgaGVtb3JyYWdpYXMgZXMgY3J1Y2lhbCBlbiBzaXR1YWNpb25lcyBkZSB0cmF1bWEuIExhIGNhcGFjaXRhY2nDs24gZGViZSBpbmNsdWlyIGVsIHVzbyBkZSBkaWZlcmVudGVzIHRpcG9zIGRlIHZlbmRhamVzLCB0b3JuaXF1ZXRlcyB5IHTDqWNuaWNhcyBwYXJhIGRldGVuZXIgc2FuZ3JhZG9zIHNldmVyb3MsIGFzw60gY29tbyBsYSBpZGVudGlmaWNhY2nDs24gZGUgc2lnbm9zIGRlIHNob2NrLgoKICAgICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI2OS41JSIgeT0iOTYuNSUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICAgIGg1IFVzbyBkZSBkZXNmaWJyaWxhZG9yZXMgZXh0ZXJub3MgYXV0b23DoXRpY29zIChERUEpCiAgICAgICAgICAgICAgICAgIHAgTGEgZmFtaWxpYXJpemFjacOzbiBjb24gZWwgdXNvIGRlIERFQSBlcyBlc2VuY2lhbCwgcG9ycXVlIGVzdG9zIGRpc3Bvc2l0aXZvcyBwdWVkZW4gc2VyIGNyw610aWNvcyBlbiBsYSByZWFuaW1hY2nDs24gZGUgcGFjaWVudGVzIGVuIHBhcm8gY2FyZMOtYWNvLiBMYSBmb3JtYWNpw7NuIGRlYmUgaW5jbHVpciBsYSBpZGVudGlmaWNhY2nDs24gZGUgY3XDoW5kbyBlcyBuZWNlc2FyaW8gdXNhciB1biBERUEsIGPDs21vIG9wZXJhciBlbCBkaXNwb3NpdGl2byB5IHN1IGludGVncmFjacOzbiBlbiBlbCBwcm9jZXNvIGRlIFJDUC4KCiAgICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5wLTMoeD0iODklIiB5PSI5Ni41JSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgICAgaDUgQXRlbmNpw7NuIGEgdsOtY3RpbWFzIGRlIGFjY2lkZW50ZXMgeSBlbmZlcm1lZGFkZXMgc8O6Yml0YXMKICAgICAgICAgICAgICAgICAgcCBBZGVtw6FzIGRlIGxhcyB0w6ljbmljYXMgZGUgcHJpbWVyb3MgYXV4aWxpb3MsIGVzIGZ1bmRhbWVudGFsIHF1ZSBsb3MgYnJpZ2FkaXN0YXMgYXByZW5kYW4gYSBldmFsdWFyIGxhIHNpdHVhY2nDs24gZGUgbGEgdsOtY3RpbWEsIGlkZW50aWZpY2FyIHNpZ25vcyB5IHPDrW50b21hcyBkZSBlbmZlcm1lZGFkZXMgc8O6Yml0YXMgKGNvbW8gdW4gaW5mYXJ0byBvIHVuIGRlcnJhbWUgY2VyZWJyYWwpIHkgcmVhY2Npb25hciBkZSBtYW5lcmEgYWRlY3VhZGEgeSByw6FwaWRhLgoKCiAgICAuYmctZnVsbC13aWR0aC0yLmJnLWZvbmRvLTEKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1hbmVqbyBkZSBpbmNlbmRpb3MKCiAgICAgICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgT3RybyBkZSBsb3MgdGVtYXMgY2xhdmVzIGVuIGxhIGNhcGFjaXRhY2nDs24sIGVzIGVsIG1hbmVqbyBkZSBpbmNlbmRpb3MsIHF1ZSByZXF1aWVyZSB1biBlbmZvcXVlIGludGVncmFsIHkgZGV0YWxsYWRvLiBBIGNvbnRpbnVhY2nDs24sIHNlIHByb2Z1bmRpemEgZW4gbG9zIGFzcGVjdG9zIGVzZW5jaWFsZXMgZGUgZXN0ZSB0ZW1hOgoKICAgICAgICAgICAgaDQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgYS4gVXNvIGRlIGV4dGludG9yZXMgZGUgZGlzdGludG9zIHRpcG9zCgogICAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IExhIGZvcm1hY2nDs24gZW4gZWwgdXNvIGRlIGV4dGludG9yZXMgZXMgZXNlbmNpYWwsIGRlYmlkbyBhIHF1ZSBjYWRhIHRpcG8gZXN0w6EgZGlzZcOxYWRvIHBhcmEgY29tYmF0aXIgZGlmZXJlbnRlcyBjbGFzZXMgZGUgZnVlZ29zLiBMb3MgYnJpZ2FkaXN0YXMgZGViZW4gY29ub2NlcjoKCiAgICAgICAgICAuY29sLWxnLTQuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTAucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQoKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkLTJfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTEucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTJfX3RleHQucC00CiAgICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIEV4dGludG9yZXMgZGUgYWd1YQogICAgICAgICAgICAgICAgcC5tYi0wIEFkZWN1YWRvcyBwYXJhIGluY2VuZGlvcyBkZSBtYXRlcmlhbGVzIGNvbWJ1c3RpYmxlcyBzw7NsaWRvcyBjb21vIG1hZGVyYSB5IHBhcGVsLiBTZSBkZWJlIGVuc2XDsWFyIHN1IGNvcnJlY3RhIGFwbGljYWNpw7NuIHBhcmEgZXZpdGFyIHF1ZSBzZSBhZ3JhdmUgZWwgZnVlZ28gZW4gY29tYnVzdGlibGVzIGzDrXF1aWRvcyBvIGVsw6ljdHJpY29zLgogICAgICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkLTJfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTIucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTJfX3RleHQucC00CiAgICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIEV4dGludG9yZXMgZGUgQ08yCiAgICAgICAgICAgICAgICBwLm1iLTAgSWRlYWxlcyBwYXJhIGZ1ZWdvcyBlbMOpY3RyaWNvcyB5IGzDrXF1aWRvcyBpbmZsYW1hYmxlcy4gTGEgY2FwYWNpdGFjacOzbiBkZWJlIGluY2x1aXIgbGEgdMOpY25pY2EgZGUgdXNvLCBhc8OtIGNvbW8gbGEgaW1wb3J0YW5jaWEgZGUgbGEgdmVudGlsYWNpw7NuIHBvc3RlcmlvciBhbCB1c28sIGRhZG8gcXVlIGVsIGNvMiBwdWVkZSBkZXNwbGF6YXIgZWwgb3jDrWdlbm8gZW4gZWwgYW1iaWVudGUuCiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmQtMl9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMy5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMl9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgRXh0aW50b3JlcyBkZSBwb2x2byBxdcOtbWljbwogICAgICAgICAgICAgICAgcC5tYi0wIFZlcnPDoXRpbGVzIHkgZWZlY3Rpdm9zIGVuIG3Dumx0aXBsZXMgdGlwb3MgZGUgaW5jZW5kaW9zLCBpbmNsdWlkb3MgbG9zIGVsw6ljdHJpY29zLiBFcyBjcnVjaWFsIHF1ZSBsb3MgYnJpZ2FkaXN0YXMgcHJhY3RpcXVlbiBzdSBtYW5pcHVsYWNpw7NuIHkgY29tcHJlbmRhbiBsYXMgbGltaXRhY2lvbmVzIGRlIGNhZGEgdGlwbyBkZSBleHRpbnRvci4KCgogICAgaDQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgYi4gUHJldmVuY2nDs24geSBjb250cm9sIGRlIGluY2VuZGlvcyBlbiBkaWZlcmVudGVzIGVzY2VuYXJpb3MKCiAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IExhIHByZXZlbmNpw7NuIGVzIGNsYXZlIHBhcmEgbWluaW1pemFyIGVsIHJpZXNnbyBkZSBpbmNlbmRpb3MuIExvcyBicmlnYWRpc3RhcyBkZWJlbiBzZXIgZm9ybWFkb3MgZW46CgogICAgVGFic0MuY29sb3ItcHJpbWFyaW8ubWItNQogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iSWRlbnRpZmljYWNpw7NuIGRlIHJpZXNnb3MiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtMS5zdmcnKSIgKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBJZGVudGlmaWNhY2nDs24gZGUgcmllc2dvcwogICAgICAgICAgICBwIFJlY29ub2NlciBtYXRlcmlhbGVzIHBlbGlncm9zb3MgZW4gZGlzdGludG9zIGVudG9ybm9zIChpbmR1c3RyaWFsZXMsIGZvcmVzdGFsZXMgeSB1cmJhbm9zKSB5IGPDs21vIGVzdG9zIHB1ZWRlbiBjb250cmlidWlyIGEgbGEgcHJvcGFnYWNpw7NuIGRlbCBmdWVnby4KICAgICAgICAKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvdGFiLTEucG5nJywgYWx0PScnKQogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iSW1wbGVtZW50YWNpw7NuIGRlIG1lZGlkYXMgcHJldmVudGl2YXMiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtMi5zdmcnKSIgKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBJbXBsZW1lbnRhY2nDs24gZGUgbWVkaWRhcyBwcmV2ZW50aXZhcwogICAgICAgICAgICBwIEFwcmVuZGVyIGEgZXN0YWJsZWNlciBwcm90b2NvbG9zIHF1ZSBwdWVkYW4gaW5jbHVpciBlbCBtYW50ZW5pbWllbnRvIGFkZWN1YWRvIGRlIGluc3RhbGFjaW9uZXMgZWzDqWN0cmljYXMsIGVsIGFsbWFjZW5hbWllbnRvIHNlZ3VybyBkZSBwcm9kdWN0b3MgaW5mbGFtYWJsZXMgeSBsYSBjcmVhY2nDs24gZGUgY29ydGFmdWVnb3MgZW4gw6FyZWFzIGZvcmVzdGFsZXMuCiAgICAgICAgCiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTUuY29sLXhsLTQub3JkZXItMQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExL3RhYi0yLnBuZycsIGFsdD0nJykKCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJDb250cm9sIGRlIGluY2VuZGlvcyIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy0zLnN2ZycpIiApCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IENvbnRyb2wgZGUgaW5jZW5kaW9zCiAgICAgICAgICAgIHAgRXN0cmF0ZWdpYXMgZWZlY3RpdmFzIHBhcmEgY29udGVuZXIgeSBleHRpbmd1aXIgaW5jZW5kaW9zIGVuIGNhZGEgdGlwbyBkZSBlc2NlbmFyaW8sIGluY2x1eWVuZG8gZWwgdXNvIGRlIGVxdWlwb3MgZGUgcHJvdGVjY2nDs24gcGVyc29uYWwgeSBsYSBldmFsdWFjacOzbiBkZSBsYSBzaXR1YWNpw7NuIHBhcmEgZGVjaWRpciBzaSBzZSBkZWJlIGludGVydmVuaXIgbyBlc3BlcmFyIGEgbG9zIHNlcnZpY2lvcyBwcm9mZXNpb25hbGVzLgogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS90YWItMy5wbmcnLCBhbHQ9JycsIHN0eWxlPSJ3aWR0aDogMTAwJTsiKQoKCiAgICBoNC5tYi00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBjLiBDb21iYXRlIGRlIGluY2VuZGlvcyBlbiBlc3RydWN0dXJhcwoKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgRWwgY29tYmF0ZSBkZSBpbmNlbmRpb3MgZW4gZXN0cnVjdHVyYXMgY29tbyBlZGlmaWNpb3MgeSB2aXZpZW5kYXMgcHJlc2VudGEgZGVzYWbDrW9zIMO6bmljb3MuIExhIGNhcGFjaXRhY2nDs24gZGViZSBpbmNsdWlyOgoKCiAgICAuYmctZnVsbC13aWR0aC0yLmJnLWZvbmRvLTIKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgICAgICAuY29sLWxnLTgKCgogICAgICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89IlByb3RvY29sb3MgZGUgYWN0dWFjacOzbiIpCiAgICAgICAgICAgICAgICBwIEVzdG9zIHNvbiBwcm9jZWRpbWllbnRvcyBlc3BlY8OtZmljb3MgcXVlIGRlYmVuIHNlciBhZG9wdGFkb3MgZW4gY2FzbyBkZSBkaWZlcmVudGVzIHRpcG9zIGRlIGVtZXJnZW5jaWFzLCBjb21vIGluY2VuZGlvcywgdGVycmVtb3RvcywgaW51bmRhY2lvbmVzIG8gc2l0dWFjaW9uZXMgZGUgdmlvbGVuY2lhLiBDYWRhIHByb3RvY29sbyBkZWJlIGRldGFsbGFyIGxhcyByZXNwb25zYWJpbGlkYWRlcyBkZSBjYWRhIG1pZW1icm8gZGUgbGEgYnJpZ2FkYSwgeSBsYXMgYWNjaW9uZXMgYSBzZWd1aXIgZW4gY2FkYSBlc2NlbmFyaW8uIEVzIGNydWNpYWwgcXVlIGVzdG9zIHByb3RvY29sb3Mgc2VhbiByZXZpc2Fkb3MgeSBhY3R1YWxpemFkb3MgcmVndWxhcm1lbnRlLCBwYXJhIHZlciBjYW1iaW9zIGVuIGVsIGVudG9ybm8gb3BlcmF0aXZvIG8gZW4gbGEgbm9ybWF0aXZhIGxlZ2FsIHZpZ2VudGUuIExhIGNsYXJpZGFkIHkgbGEgYWNjZXNpYmlsaWRhZCBkZSBlc3RvcyBwcm90b2NvbG9zLCBzb24gZXNlbmNpYWxlcyBwYXJhIGFzZWd1cmFyIHF1ZSBjYWRhIG1pZW1icm8gZGVsIGVxdWlwbyBzZXBhIHF1w6kgaGFjZXIgZW4gZWwgbW9tZW50byBjcsOtdGljby4KCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89Ik1hcGFzIGRlIHJpZXNnbyIpCiAgICAgICAgICAgICAgICBwIExhIGlkZW50aWZpY2FjacOzbiBkZSDDoXJlYXMgZGUgcmllc2dvIGVzIGVzZW5jaWFsIHBhcmEgdW5hIHJlc3B1ZXN0YSBlZmljYXouIEVzdG9zIG1hcGFzIHBlcm1pdGVuIHZpc3VhbGl6YXIgbGFzIHpvbmFzIG3DoXMgdnVsbmVyYWJsZXMgeSBsb3MgY2FtaW5vcyBkZSBldmFjdWFjacOzbiBtw6FzIHNlZ3Vyb3MuIEFkZW3DoXMsIGRlYmVuIGluY2x1aXIgaW5mb3JtYWNpw7NuIHNvYnJlIGxvcyByZWN1cnNvcyBkaXNwb25pYmxlcywgY29tbyBleHRpbnRvcmVzLCBzYWxpZGFzIGRlIGVtZXJnZW5jaWEgeSBwdW50b3MgZGUgcmV1bmnDs24uIExhIGVsYWJvcmFjacOzbiBkZSBlc3RvcyBtYXBhcyBkZWJlIHNlciB1biBwcm9jZXNvIHBhcnRpY2lwYXRpdm8sIGludm9sdWNyYW5kbyBhIHRvZG9zIGxvcyBuaXZlbGVzIGRlIGxhIG9yZ2FuaXphY2nDs24sIHBhcmEgYXNlZ3VyYXIgY29uc2lkZXJhciBkaWZlcmVudGVzIHBlcnNwZWN0aXZhcyB5IGNvbm9jaW1pZW50b3MgbG9jYWxlcy4KCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89IlNpbXVsYWNyb3MgeSBlbnRyZW5hbWllbnRvcyByZWd1bGFyZXMiKQogICAgICAgICAgICAgICAgcCBMYSBwcmVwYXJhY2nDs24gZXMgY2xhdmUgZW4gbGEgZ2VzdGnDs24gZGUgZW1lcmdlbmNpYXMuIFJlYWxpemFyIHNpbXVsYWNyb3MgeSBlbnRyZW5hbWllbnRvcyBwZXJpw7NkaWNvcywgYXl1ZGEgYSBtYW50ZW5lciBhbCBwZXJzb25hbCBhbGVydGEgeSBmYW1pbGlhcml6YWRvIGNvbiBsb3MgcHJvY2VkaW1pZW50b3MgZXN0YWJsZWNpZG9zLiBFc3RvcyBlamVyY2ljaW9zIHByw6FjdGljb3Mgbm8gc29sbyByZWZ1ZXJ6YW4gbGEgY29uZmlhbnphIGRlbCBlcXVpcG8sIHNpbm8gcXVlIHRhbWJpw6luIHBlcm1pdGVuIGlkZW50aWZpY2FyIMOhcmVhcyBkZSBtZWpvcmEgZW4gbG9zIHByb3RvY29sb3MgZXhpc3RlbnRlcy4gRHVyYW50ZSBsb3Mgc2ltdWxhY3JvcywgZXMgaW1wb3J0YW50ZSBldmFsdWFyIGVsIHRpZW1wbyBkZSByZXNwdWVzdGEsIGxhIGVmZWN0aXZpZGFkIGRlIGxhIGNvbXVuaWNhY2nDs24geSBsYSBjb29yZGluYWNpw7NuIGVudHJlIGxvcyBtaWVtYnJvcyBkZWwgZXF1aXBvLiBBZGVtw6FzLCBzZSBkZWJlbiBkb2N1bWVudGFyIGxvcyByZXN1bHRhZG9zIGRlIGNhZGEgZWplcmNpY2lvIHBhcmEgcmVhbGl6YXIgYWp1c3RlcyBuZWNlc2FyaW9zIHkgYXPDrSBvcHRpbWl6YXIgbGEgcGxhbmlmaWNhY2nDs24uCgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE0LnBuZyIsIGFsdD0iIikubWItNC5tYi1sZy0wCgoKCiAgICAgICAgaDQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgZC4gRXZhY3VhY2nDs24gZGUgcGVyc29uYXMgZW4gY2FzbyBkZSBpbmNlbmRpbwoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IExhIGV2YWN1YWNpw7NuIGVmaWNheiBlcyBjcnVjaWFsIGR1cmFudGUgdW4gaW5jZW5kaW8uIExhIGNhcGFjaXRhY2nDs24gZGViZSBpbmNsdWlyOgoKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTUuc3ZnIgogICAgICAgICAgICAgICAgYWx0PSJCYXJyZXJhcyIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBEZXNhcnJvbGxvIGRlIHBsYW5lcyBkZSBldmFjdWFjacOzbgogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBDw7NtbyBlbGFib3JhciB5IGNvbXVuaWNhciBwbGFuZXMgZGUgZXZhY3VhY2nDs24gY2xhcm9zIHkgZWZlY3Rpdm9zLCBhZGFwdGFkb3MgYSBkaWZlcmVudGVzIHRpcG9zIGRlIGVzdHJ1Y3R1cmFzIHkgc2l0dWFjaW9uZXMuCgogICAgICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE2LnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iSW5mb3JtYWNpw7NuIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA5MHB4IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIFNpbXVsYWNyb3MgZGUgZXZhY3VhY2nDs24KICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgUmVhbGl6YXIgZWplcmNpY2lvcyByZWd1bGFyZXMgcXVlIHBlcm1pdGFuIGEgbG9zIGJyaWdhZGlzdGFzIHkgYSBsb3Mgb2N1cGFudGVzIGZhbWlsaWFyaXphcnNlIGNvbiBsYXMgcnV0YXMgZGUgZXNjYXBlIHkgbG9zIHByb2NlZGltaWVudG9zIGEgc2VndWlyIGVuIGNhc28gZGUgdW5hIGVtZXJnZW5jaWEuCgogICAgICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE3LnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iUHJvZHVjdG8iCiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDkwcHgiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgQ29tdW5pY2FjacOzbiBkdXJhbnRlIGxhIGV2YWN1YWNpw7NuCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEVuc2XDsWFyIGhhYmlsaWRhZGVzIGRlIGxpZGVyYXpnbyB5IGNvbXVuaWNhY2nDs24gcGFyYSBndWlhciBhIGxhcyBwZXJzb25hcyBkZSBtYW5lcmEgb3JkZW5hZGEgeSBzZWd1cmEgZnVlcmEgZGVsIHBlbGlncm8uCgogICAgCiAgICBoMi5tYi00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBCw7pzcXVlZGEgeSByZXNjYXRlCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBFc3RlIHRlbWEgZXMgZnVuZGFtZW50YWwgZGVudHJvIGRlIGxhIGZvcm1hY2nDs24sIGRhZG8gcXVlIHNpIHNlIHJlYWxpemEgY29uIHVuYSBidWVuYSB0w6ljbmljYSBkZXBlbmRlcsOhIGVsIMOpeGl0byBkZSBsYSBicmlnYWRhIGVuIGRpY2hhIGVtZXJnZW5jaWEsIGFudGUgbG8gY3VhbCBsYXMgZm9ybWFjaW9uZXMgZGViZW4gZXN0YXIgb3JpZW50YWRhcyBlbiBsbyBzaWd1aWVudGU6CgogICAgaDQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgYS4gVMOpY25pY2FzIGRlIHJlc2NhdGUgZW4gYWNjaWRlbnRlcwoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlci5tYi01CiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3NsaWRlci0xLTIucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgQWNjaWRlbnRlcyB2ZWhpY3VsYXJlcwogICAgICAgICAgICAgIHAgTGEgZm9ybWFjacOzbiBkZWJlIGluY2x1aXIgZWwgdXNvIGRlIHTDqWNuaWNhcyBlc3BlY8OtZmljYXMgcGFyYSBlbCByZXNjYXRlIGRlIHBlcnNvbmFzIGF0cmFwYWRhcyBlbiB2ZWjDrWN1bG9zIHRyYXMgY29saXNpb25lcy4gRXN0byBpbmNsdXllIGxhIGNvbXByZW5zacOzbiBkZSBsYSBhbmF0b23DrWEgZGUgbG9zIHZlaMOtY3Vsb3MsIGVsIHVzbyBkZSBoZXJyYW1pZW50YXMgaGlkcsOhdWxpY2FzIGNvbW8gY2l6YWxsYXMgeSBleHBhbnNvcmVzLCB5IGxhIGFwbGljYWNpw7NuIGRlIHTDqWNuaWNhcyBkZSBlc3RhYmlsaXphY2nDs24gZGVsIHZlaMOtY3VsbyBwYXJhIGdhcmFudGl6YXIgbGEgc2VndXJpZGFkIGRlbCByZXNjYXRhZG9yIHkgbGEgdsOtY3RpbWEuCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExL3NsaWRlci0yLTIucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgQWNjaWRlbnRlcyBlbiBlbCBsdWdhciBkZSB0cmFiYWpvCiAgICAgICAgICAgICAgcCBMb3MgcmVzY2F0aXN0YXMgZGViZW4gZXN0YXIgZmFtaWxpYXJpemFkb3MgY29uIGxvcyByaWVzZ29zIGFzb2NpYWRvcyBhIGRpZmVyZW50ZXMgdGlwb3MgZGUgZW50b3Jub3MgbGFib3JhbGVzLCBjb21vIGxhIGNvbnN0cnVjY2nDs24gbyBsYSBpbmR1c3RyaWEsIGRvbmRlIHB1ZWRlbiBvY3VycmlyIGNhw61kYXMsIGF0cmFwYW1pZW50b3MgbyBhY2NpZGVudGVzIGNvbiBtYXF1aW5hcmlhIHBlc2FkYS4KCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvc2xpZGVyLTMtMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBEZXNhc3RyZXMgbmF0dXJhbGVzCiAgICAgICAgICAgICAgcCBMYSBjYXBhY2l0YWNpw7NuIGRlYmUgaW5jbHVpciBlbCBtYW5lam8gZGUgc2l0dWFjaW9uZXMgcHJvdm9jYWRhcyBwb3IgZGVzYXN0cmVzIG5hdHVyYWxlcyBjb21vIHRlcnJlbW90b3MsIGludW5kYWNpb25lcyBvIGRlc2xpemFtaWVudG9zIGRlIHRpZXJyYS4gRXN0byBpbXBsaWNhIGVsIGNvbm9jaW1pZW50byBkZSB0w6ljbmljYXMgZGUgYsO6c3F1ZWRhIHkgcmVzY2F0ZSBlbiB0ZXJyZW5vcyBkaWbDrWNpbGVzIHkgbGEgdXRpbGl6YWNpw7NuIGRlIGVxdWlwYW1pZW50byBlc3BlY8OtZmljbyBwYXJhIG9wZXJhciBlbiBjb25kaWNpb25lcyBhZHZlcnNhcy4KCgogICAgaDQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgYi4gRXh0cmFjY2nDs24gZGUgdsOtY3RpbWFzIGF0cmFwYWRhcwoKICAgIC5yb3cubWItNAogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMi5weC00LnB5LTUoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQKICAgICAgICAgIHAubWItMCBDdWFuZG8gb2N1cnJlIHVuIGNvbGFwc28gZXN0cnVjdHVyYWwsIGxhIGV4dHJhY2Npw7NuIGRlIHbDrWN0aW1hcyBhdHJhcGFkYXMgc2UgY29udmllcnRlIGVuIHVuYSB0YXJlYSBjcsOtdGljYS4gTG9zIG1pZW1icm9zIGRlIGxhcyBicmlnYWRhcyBkZWJlbiBhcHJlbmRlciBhIGV2YWx1YXIgbGEgZXN0YWJpbGlkYWQgZGUgbGFzIGVzdHJ1Y3R1cmFzIGNvbGFwc2FkYXMgeSBhIHV0aWxpemFyIHTDqWNuaWNhcyBkZSByZXNjYXRlIHF1ZSBtaW5pbWljZW4gZWwgcmllc2dvIGRlIGNhdXNhciBtw6FzIGRhw7FvcyBhIGxhcyB2w61jdGltYXMuCiAgICAgICAgCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTGEgZm9ybWFjacOzbiBkZWJlIGluY2x1aXIgdGFtYmnDqW4gbGEgcHLDoWN0aWNhIGRlIHJlc2NhdGUgZW4gc2l0dWFjaW9uZXMgZG9uZGUgbGFzIHbDrWN0aW1hcyBlc3TDoW4gYXRyYXBhZGFzIGJham8gZXNjb21icm9zLCBsbyBxdWUgcmVxdWllcmUgdW4gZW5mb3F1ZSBjdWlkYWRvc28geSB0w6ljbmljbyBwYXJhIGV2aXRhciBlbCBhZ3JhdmFtaWVudG8gZGUgbGFzIGxlc2lvbmVzLgogICAgICAgIAogICAgICAuY29sLWxnLTQuZC1ub25lLmQtc20tYmxvY2sKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE4LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCgoKICAgIGg0Lm1iLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIGMuIFByb3RvY29sb3MgZGUgc2VndXJpZGFkIGVuIHJlc2NhdGVzCgogICAgLnJvdy5tYi00CiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS8xOS5wbmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFRhbCBjb21vIGxvIGVzdGFibGVjZSBsYSBSZXNvbHVjacOzbiA0MjcxIGRlbCAyMDIxIGRlbCBNaW5pc3RlcmlvIGRlIHRyYWJham8sIHRvZG8gdHJhYmFqbyBlbiBhbHR1cmFzIGRlYmUgdGVuZXIgdW4gcGxhbiBkZSByZXNjYXRlIHF1ZSBjb21vIHBhcnRlIGRlIHVuIHBsYW4gZGUgcHJldmVuY2nDs24geSByZXNwdWVzdGEgYW50ZSBlbWVyZ2VuY2lhcywgbGEgc2VndXJpZGFkIGVzIHByaW1vcmRpYWwgZW4gY3VhbHF1aWVyIG9wZXJhY2nDs24gZGUgcmVzY2F0ZS4gTG9zIGJyaWdhZGlzdGFzIGRlYmVuIGVzdGFyIGZvcm1hZG9zIGVuIGxhIGlkZW50aWZpY2FjacOzbiB5IG1pdGlnYWNpw7NuIGRlIHJpZXNnb3MsIGFzw60gY29tbyBlbiBsYSBhcGxpY2FjacOzbiBkZSBwcm90b2NvbG9zIGRlIHNlZ3VyaWRhZCBxdWUgZ2FyYW50aWNlbiB1biBhbWJpZW50ZSBkZSB0cmFiYWpvIHNlZ3Vyby4KCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRXN0byBpbmNsdXllIGxhIHJlYWxpemFjacOzbiBkZSByZXVuaW9uZXMgZGUgcGxhbmlmaWNhY2nDs24gYW50ZXMgZGUgY2FkYSBvcGVyYWNpw7NuLCBsYSBldmFsdWFjacOzbiBkZSBsYSBlc2NlbmEgZGVsIGluY2lkZW50ZSB5IGxhIGltcGxlbWVudGFjacOzbiBkZSBtZWRpZGFzIGRlIHNlZ3VyaWRhZCBwYXJhIHByb3RlZ2VyIGEgdG9kb3MgbG9zIGludm9sdWNyYWRvcy4gVGFtYmnDqW4gZXMgY3J1Y2lhbCBxdWUgbG9zIHJlc2NhdGlzdGFzIHNlYW4gY2FwYWNlcyBkZSByZWNvbm9jZXIgc3VzIGzDrW1pdGVzIHkgdHJhYmFqYXIgZW4gZXF1aXBvIHBhcmEgYXNlZ3VyYXIgdW5hIHJlc3B1ZXN0YSBjb29yZGluYWRhIHkgZWZlY3RpdmEuCgogICAgICAgIC5iZy1jb2xvci0xLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMjAuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBMYSBjYXBhY2l0YWNpw7NuIGRlIGxhcyBicmlnYWRhcyBkZSBlbWVyZ2VuY2lhIGVuIGVzdGFzIMOhcmVhcyBjbGF2ZXMsIG5vIHNvbG8gbWVqb3JhIHN1IGNhcGFjaWRhZCBkZSByZXNwdWVzdGEgYW50ZSBzaXR1YWNpb25lcyBjcsOtdGljYXMsIHNpbm8gcXVlIHRhbWJpw6luIGluY3JlbWVudGEgbGEgc2VndXJpZGFkIGRlIGxhcyB2w61jdGltYXMgeSBkZWwgcHJvcGlvIGVxdWlwbyBkZSByZXNjYXRlLgoKCiAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IExhIGludmVyc2nDs24gZW4gZm9ybWFjacOzbiBjb250aW51YSB5IGFjdHVhbGl6YWRhIGVzIGVzZW5jaWFsIHBhcmEgbWFudGVuZXIgbGEgZWZpY2FjaWEgeSBsYSBwcmVwYXJhY2nDs24gZGUgZXN0b3MgZXF1aXBvcywgZ2FyYW50aXphbmRvIGFzw60gdW5hIHJlc3B1ZXN0YSByw6FwaWRhIHkgYWRlY3VhZGEgYW50ZSBjdWFscXVpZXIgZW1lcmdlbmNpYS4KCgogICAgaDIubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgR2VzdGnDs24gZGUgcmllc2dvcyB5IGV2YWx1YWNpw7NuIGRlIGFtZW5hemFzCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBMYSBnZXN0acOzbiBkZSByaWVzZ29zIGVzIHVuIHByb2Nlc28gc2lzdGVtw6F0aWNvIHF1ZSBwZXJtaXRlIGlkZW50aWZpY2FyLCBldmFsdWFyIHkgcHJpb3JpemFyIHJpZXNnb3MsIHNlZ3VpZG8gZGUgbGEgYXBsaWNhY2nDs24gZGUgcmVjdXJzb3MgcGFyYSBtaW5pbWl6YXIsIGNvbnRyb2xhciB5IG1vbml0b3JlYXIgbGEgcHJvYmFiaWxpZGFkIHkgZWwgaW1wYWN0byBkZSBldmVudG9zIGFkdmVyc29zLiBQYXJhIGVsbG8sIGxhcyBicmlnYWRhcyBkZSBlbWVyZ2VuY2lhIGRlYmVuIHNlciBmb3JtYWRhcyBlbjoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby0zCiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAgICAgLmNvbC1sZy04CgogICAgICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89IklkZW50aWZpY2FjacOzbiB5IGFuw6FsaXNpcyBkZSByaWVzZ29zIHBvdGVuY2lhbGVzIGVuIGVsIGVudG9ybm8iKQogICAgICAgICAgICAgICAgcCBFc3RvIGltcGxpY2EgdW4gZXN0dWRpbyBkZXRhbGxhZG8gZGUgbG9zIGFudGVjZWRlbnRlcyBnZW9ncsOhZmljb3MsIGNsaW3DoXRpY29zIHkgc29jaWFsZXMgZGUgbGEgem9uYS4gTGEgY2FwYWNpdGFjacOzbiBkZWJlIGluY2x1aXIgbcOpdG9kb3MgcGFyYSBpZGVudGlmaWNhciBwZWxpZ3JvcyBjb21vIGludW5kYWNpb25lcywgdGVycmVtb3RvcywgaW5jZW5kaW9zIGZvcmVzdGFsZXMsIGFzw60gY29tbyBhbWVuYXphcyBjYXVzYWRhcyBwb3IgbGEgYWN0aXZpZGFkIGh1bWFuYSwgY29tbyBhY2NpZGVudGVzIGluZHVzdHJpYWxlcyBvIGF0YXF1ZXMgdGVycm9yaXN0YXMuCgogICAgICAgICAgICAgIC5kaXYodGl0dWxvPSJFdmFsdWFjacOzbiBkZSBkYcOxb3MgZW4gZWwgw6FyZWEgYWZlY3RhZGEiKQogICAgICAgICAgICAgICAgcCBMb3MgbWllbWJyb3MgZGUgbGEgYnJpZ2FkYSBkZWJlbiBhcHJlbmRlciBhIHJlYWxpemFyIGV2YWx1YWNpb25lcyByw6FwaWRhcyB5IHByZWNpc2FzIGRlIGxvcyBkYcOxb3MgbWF0ZXJpYWxlcyB5IGh1bWFub3MuIEVzdG8gaW5jbHV5ZSBsYSB1dGlsaXphY2nDs24gZGUgaGVycmFtaWVudGFzIHkgdGVjbm9sb2fDrWFzIGFkZWN1YWRhcyBwYXJhIG1lZGlyIGVsIGltcGFjdG8geSBkZXRlcm1pbmFyIGxhcyBuZWNlc2lkYWRlcyBpbm1lZGlhdGFzIGRlIGF5dWRhLgoKICAgICAgICAgICAgICAuZGl2KHRpdHVsbz0iQXBsaWNhY2nDs24gZGUgcHJvdG9jb2xvcyBkZSBzZWd1cmlkYWQgZW4gc2l0dWFjaW9uZXMgZGUgcmllc2dvIikKICAgICAgICAgICAgICAgIHAgRXMgZXNlbmNpYWwgcXVlIGxvcyBicmlnYWRpc3RhcyBlc3TDqW4gZW50cmVuYWRvcyBlbiBsYSBtYW5pcHVsYWNpw7NuIHNlZ3VyYSBkZSBtYXRlcmlhbGVzIHBlbGlncm9zb3MsIGluY2x1eWVuZG8gc3VzdGFuY2lhcyBxdcOtbWljYXMsIGJpb2zDs2dpY2FzLCByYWRpb2zDs2dpY2FzIHkgbnVjbGVhcmVzLiBFc3RvIGFzZWd1cmEgcXVlIHB1ZWRhbiBvcGVyYXIgZGUgbWFuZXJhIHNlZ3VyYSB5IGVmZWN0aXZhIGVuIGVudG9ybm9zIHF1ZSBwcmVzZW50YW4gZXN0b3Mgcmllc2dvcy4KCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89IkNhcGFjaXRhY2nDs24gZW4gbGEgaWRlbnRpZmljYWNpw7NuIGRlIHBlbGlncm9zIG5hdHVyYWxlcyB5IHRlY25vbMOzZ2ljb3MiKQogICAgICAgICAgICAgICAgcCBMb3MgYnJpZ2FkaXN0YXMgZGViZW4gcmVjaWJpciBmb3JtYWNpw7NuIHNvYnJlIGPDs21vIHJlY29ub2NlciB5IHJlc3BvbmRlciBhIGFtZW5hemFzIHRhbnRvIG5hdHVyYWxlcyAoY29tbyBpbnVuZGFjaW9uZXMsIHNpc21vcykgY29tbyB0ZWNub2zDs2dpY2FzIChmYWxsb3MgZGUgaW5mcmFlc3RydWN0dXJhLCBjb250YW1pbmFjacOzbikuIEVzdG8gaW5jbHV5ZSBlbCB1c28gZGUgbWFwYXMgZGUgcmllc2dvIHkgc2lzdGVtYXMgZGUgYWxlcnRhIHRlbXByYW5hLgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzIxLnBuZyIsIGFsdD0iIikubWItNC5tYi1sZy0wCgogICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIENvbXVuaWNhY2nDs24geSBjb29yZGluYWNpw7NuIGVuIGVtZXJnZW5jaWFzCgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgTGEgY29tdW5pY2FjacOzbiBlZmVjdGl2YSBlcyB1bmEgZGUgbGFzIHBpZWRyYXMgYW5ndWxhcmVzIGRlIGxhIHJlc3B1ZXN0YSBhIGVtZXJnZW5jaWFzLiBEdXJhbnRlIHVuYSBjcmlzaXMsIGxhIGluZm9ybWFjacOzbiBwcmVjaXNhIHkgb3BvcnR1bmEgcHVlZGUgbWFyY2FyIGxhIGRpZmVyZW5jaWEgZW50cmUgbGEgdmlkYSB5IGxhIG11ZXJ0ZS4gUG9yIGVsbG8sIGxhIGNhcGFjaXRhY2nDs24gZW4gZXN0ZSDDoW1iaXRvIGRlYmUgYWJhcmNhciB2YXJpb3MgYXNwZWN0b3MgY3J1Y2lhbGVzOgoKCiAgICAgICAgaDQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgYS4gVXNvIGRlIHNpc3RlbWFzIGRlIGNvbXVuaWNhY2nDs24gZW4gZW1lcmdlbmNpYXMKCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzIyLnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iQmFycmVyYXMiCiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDkwcHgiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgUmFkaW9zIHkgZGlzcG9zaXRpdm9zIGRlIGNvbXVuaWNhY2nDs24KICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgTG9zIG1pZW1icm9zIGRlIGxhcyBicmlnYWRhcyBkZWJlbiBmYW1pbGlhcml6YXJzZSBjb24gZWwgdXNvIGRlIHJhZGlvcyBiaWRpcmVjY2lvbmFsZXMsIHF1ZSBzb24gZXNlbmNpYWxlcyBwYXJhIG1hbnRlbmVyIGVsIGNvbnRhY3RvIGVuIMOhcmVhcyBkb25kZSBsYXMgcmVkZXMgZGUgdGVsZWZvbsOtYSBwdWVkZW4gZXN0YXIgY2HDrWRhcyBvIHNhdHVyYWRhcy4KCiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMjMuc3ZnIgogICAgICAgICAgICAgICAgYWx0PSJJbmZvcm1hY2nDs24iCiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDkwcHgiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgQ29tdW5pY2FjacOzbiBwb3Igc2F0w6lsaXRlCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEVzIGZ1bmRhbWVudGFsIHF1ZSBjb25vemNhbiBlbCB1c28gZGUgZGlzcG9zaXRpdm9zIGRlIGNvbXVuaWNhY2nDs24gcG9yIHNhdMOpbGl0ZSwgcXVlIHB1ZWRlbiBzZXIgdXRpbGl6YWRvcyBwYXJhIGVzdGFibGVjZXIgY29udGFjdG8gZW4gc2l0dWFjaW9uZXMgZG9uZGUgbGFzIGluZnJhZXN0cnVjdHVyYXMgY29udmVuY2lvbmFsZXMgaGFuIHNpZG8gZGVzdHJ1aWRhcy4KCiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMjQuc3ZnIgogICAgICAgICAgICAgICAgYWx0PSJQcm9kdWN0byIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBSZWRlcyBkZSBkYXRvcwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBMYSBjYXBhY2l0YWNpw7NuIGRlYmUgaW5jbHVpciBlbCB1c28gZGUgYXBsaWNhY2lvbmVzIHkgcGxhdGFmb3JtYXMgZGlnaXRhbGVzIHF1ZSBwZXJtaXRhbiBsYSBjb211bmljYWNpw7NuIHkgZWwgaW50ZXJjYW1iaW8gZGUgaW5mb3JtYWNpw7NuIGVuIHRpZW1wbyByZWFsLCBmYWNpbGl0YW5kbyBsYSBjb29yZGluYWNpw7NuIGVudHJlIGRpZmVyZW50ZXMgZXF1aXBvcyBkZSByZXNwdWVzdGEuCgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tMy5tYi01CiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwogICAgICAgIGg0Lm1iLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIGIuIENvb3JkaW5hY2nDs24gY29uIG90cmFzIGJyaWdhZGFzIHkgYXV0b3JpZGFkZXM6CgogICAgICAgIFRhYnNDLmNvbG9yLXByaW1hcmlvLm1iLTUKICAgICAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJJbnRlcm9wZXJhYmlsaWRhZCIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvaWNvbi10YWItYy0xLnN2ZycpIiApCiAgICAgICAgICAgIC5yb3cKICAgICAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTUuY29sLXhsLTQub3JkZXItMQogICAgICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTEvdGFiLTEtMi5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgICAgICBoNCBJbnRlcm9wZXJhYmlsaWRhZAogICAgICAgICAgICAgICAgcCBMYXMgYnJpZ2FkYXMgZGUgZW1lcmdlbmNpYSBkZWJlbiBlbnRyZW5hcnNlIGVuIHByb2NlZGltaWVudG9zIGRlIGludGVyb3BlcmFiaWxpZGFkIHBhcmEgdHJhYmFqYXIgZWZpY2F6bWVudGUgY29uIG90cmFzIHVuaWRhZGVzIGRlIHJlc3B1ZXN0YSwgY29tbyBsYSBwb2xpY8OtYSwgbG9zIHNlcnZpY2lvcyBtw6lkaWNvcyBkZSBlbWVyZ2VuY2lhIHkgbGFzIGZ1ZXJ6YXMgYXJtYWRhcy4gRXN0byBpbmNsdXllIGNvbXByZW5kZXIgbG9zIHJvbGVzIHkgcmVzcG9uc2FiaWxpZGFkZXMgZGUgY2FkYSBlbnRpZGFkIGR1cmFudGUgdW5hIGNyaXNpcy4KICAgICAgICAgICAgCgogICAgICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkVzdGFibGVjaW1pZW50byBkZSBwcm90b2NvbG9zIGRlIGNvb3JkaW5hY2nDs24iIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtMi5zdmcnKSIgKQogICAgICAgICAgICAucm93CiAgICAgICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEKICAgICAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExL3RhYi0yLTIucG5nJywgYWx0PScnKQogICAgICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICAgICAgaDQgRXN0YWJsZWNpbWllbnRvIGRlIHByb3RvY29sb3MgZGUgY29vcmRpbmFjacOzbgogICAgICAgICAgICAgICAgcCBTZSBkZWJlbiBkZXNhcnJvbGxhciB5IHByYWN0aWNhciBwcm90b2NvbG9zIGNsYXJvcyBxdWUgZGVmaW5hbiBjw7NtbyBzZSBsbGV2YXLDoSBhIGNhYm8gbGEgY29vcmRpbmFjacOzbiBlbnRyZSBkaWZlcmVudGVzIGFnZW5jaWFzLCBhc2VndXJhbmRvIHF1ZSBsYSBpbmZvcm1hY2nDs24gZmx1eWEgZGUgbWFuZXJhIGVmaWNpZW50ZSB5IHF1ZSBzZSB0b21lbiBkZWNpc2lvbmVzIHLDoXBpZGFzIHkgZnVuZGFtZW50YWRhcy4KICAgICAgICAgICAgCiAgICAgICAgaDQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgYy4gUHJvdG9jb2xvcyBkZSBpbmZvcm1hY2nDs24geSB0b21hIGRlIGRlY2lzaW9uZXMgZW4gc2l0dWFjaW9uZXMgZGUgY3Jpc2lzOgogICAgICAgIAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAgIC5jb2wtbGctNi5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmQtMl9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yNS5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMl9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgRXZhbHVhY2nDs24gZGUgc2l0dWFjaW9uZXMKICAgICAgICAgICAgICAgIHAubWItMCBMb3MgbWllbWJyb3MgZGUgbGFzIGJyaWdhZGFzIGRlYmVuIHNlciBlbnRyZW5hZG9zIGVuIGxhIGV2YWx1YWNpw7NuIHLDoXBpZGEgeSBwcmVjaXNhIGRlIGxhcyBzaXR1YWNpb25lcyBkZSBlbWVyZ2VuY2lhIHBhcmEgcG9kZXIgZm9ybXVsYXIgcGxhbmVzIGRlIGFjY2nDs24gYWRlY3VhZG9zLgogICAgICAgICAgLmNvbC1sZy02Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkLTJfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMjYucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTJfX3RleHQucC00CiAgICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIFRvbWEgZGUgZGVjaXNpb25lcyBiYWpvIHByZXNpw7NuCiAgICAgICAgICAgICAgICBwLm1iLTAgTGEgY2FwYWNpdGFjacOzbiBkZWJlIGluY2x1aXIgc2ltdWxhY2lvbmVzIHkgZWplcmNpY2lvcyBxdWUgcGVybWl0YW4gYSBsb3MgYnJpZ2FkaXN0YXMgcHJhY3RpY2FyIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBjcsOtdGljYXMgZW4gdW4gZW50b3JubyBkZSBhbHRhIHByZXNpw7NuIGUgaW5jZXJ0aWR1bWJyZS4KCgogICAgaDIubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgUHNpY29sb2fDrWEgZGUgZW1lcmdlbmNpYXMKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTgKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBMYSBwc2ljb2xvZ8OtYSBkZSBlbWVyZ2VuY2lhcywgZXMgdW4gY2FtcG8gZXNwZWNpYWxpemFkbyBxdWUgc2UgY2VudHJhIGVuIGxhcyByZWFjY2lvbmVzIGh1bWFuYXMgYW50ZSBzaXR1YWNpb25lcyBkZSBjcmlzaXMgeSBkZXNhc3RyZXMuIExhIGZvcm1hY2nDs24gZW4gZXN0YSDDoXJlYSBlcyBlc2VuY2lhbCBwYXJhIHF1ZSBsb3MgbWllbWJyb3MgZGUgbGFzIGJyaWdhZGFzIGRlIGVtZXJnZW5jaWEgcHVlZGFuIGNvbXByZW5kZXIgeSBnZXN0aW9uYXIgbGFzIHJlc3B1ZXN0YXMgZW1vY2lvbmFsZXMgZGUgbGFzIHBlcnNvbmFzIGFmZWN0YWRhcywgYXPDrSBjb21vIGxhcyBzdXlhcyBwcm9waWFzIGVuIHNpdHVhY2lvbmVzIGRlIGFsdGEgcHJlc2nDs24uCgogICAgICAgIGg0Lm1iLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIGEuIE1hbmVqbyBkZWwgZXN0csOpcyB5IGFwb3lvIGVtb2Npb25hbAoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBVbmEgZGUgbGFzIHByaW1lcmFzIMOhcmVhcyBkZSBlbmZvcXVlIGRlYmUgc2VyIGVsIG1hbmVqbyBkZWwgZXN0csOpcywgdGFudG8gZW4gbGFzIHbDrWN0aW1hcyBjb21vIGVuIGxvcyByZXNjYXRpc3Rhcy4gTGEgZXhwb3NpY2nDs24gYSBzaXR1YWNpb25lcyB0cmF1bcOhdGljYXMgcHVlZGUgZGVzZW5jYWRlbmFyIHJlc3B1ZXN0YXMgaW50ZW5zYXMgZGUgZXN0csOpcyB5IGFuc2llZGFkLiBQb3IgbG8gdGFudG8sIGVzIGNydWNpYWwgcXVlIGxvcyBtaWVtYnJvcyBkZSBsYXMgYnJpZ2FkYXMgYXByZW5kYW4gdMOpY25pY2FzIGRlIGF1dG9jdWlkYWRvIHkgbWFuZWpvIGRlbCBlc3Ryw6lzLCBwYXJhIG1hbnRlbmVyIHN1IGJpZW5lc3RhciBlbW9jaW9uYWwuIEVzdG8gaW5jbHV5ZToKICAgICAgICAKICAgICAgLmNvbC1sZy00LmQtbm9uZS5kLXNtLWJsb2NrCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yNy5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpLm1iLTQubWItbGctMAoKCiAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0Lm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yOC5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAuY29sLWxnLTgKCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89IlTDqWNuaWNhcyBkZSByZWxhamFjacOzbiIpCiAgICAgICAgICAgIHAgUHLDoWN0aWNhcyBjb21vIGxhIHJlc3BpcmFjacOzbiBwcm9mdW5kYSwgbGEgbWVkaXRhY2nDs24geSBlbCBtaW5kZnVsbmVzcyBwdWVkZW4gYXl1ZGFyIGEgcmVkdWNpciBsYSBhbnNpZWRhZCB5IG1lam9yYXIgbGEgY29uY2VudHJhY2nDs24gZHVyYW50ZSBsYXMgb3BlcmFjaW9uZXMgZGUgcmVzY2F0ZS4KCiAgICAgICAgICAuZGl2KHRpdHVsbz0iR2VzdGnDs24gZGUgZXF1aXBvcyIpCiAgICAgICAgICAgIHAgRWwgbGlkZXJhemdvIGVuIHNpdHVhY2lvbmVzIGRlIGVtZXJnZW5jaWEgaW1wbGljYSByZWNvbm9jZXIgbGFzIHNlw7FhbGVzIGRlIGFnb3RhbWllbnRvIGVtb2Npb25hbCBlbiBlbCBlcXVpcG8sIGZvbWVudGFuZG8gdW4gYW1iaWVudGUgZGUgYXBveW8gbXV0dW8geSBjb211bmljYWNpw7NuIGFiaWVydGEuCgogICAgLmJnLWZ1bGwtd2lkdGgtMi5iZy1mb25kby01Lm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCiAgICAgICAgaDQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgYi4gVMOpY25pY2FzIGRlIGFwb3lvIHBzaWNvbMOzZ2ljbwoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IExvcyBicmlnYWRpc3RhcyBkZWJlbiBlc3RhciBlcXVpcGFkb3MgY29uIHTDqWNuaWNhcyBkZSBhcG95byBwc2ljb2zDs2dpY28gcXVlIGxlcyBwZXJtaXRhbiBicmluZGFyIGFzaXN0ZW5jaWEgZWZlY3RpdmEgYSBsYXMgcGVyc29uYXMgYWZlY3RhZGFzLiBFc3RvIGluY2x1eWU6CgogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAgICAgLmNvbC1sZy04CgogICAgICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICAgICAgLmRpdih0aXR1bG89IlByaW1lcmEgaW50ZXJ2ZW5jacOzbiBwc2ljb2zDs2dpY2EiKQogICAgICAgICAgICAgICAgcCBGb3JtYXIgYSBsb3MgYnJpZ2FkaXN0YXMgZW4gY8OzbW8gcHJvcG9yY2lvbmFyIHVuIHByaW1lciBhcG95byBwc2ljb2zDs2dpY28gcHVlZGUgYXl1ZGFyIGEgZXN0YWJpbGl6YXIgYSBsYXMgcGVyc29uYXMgYWZlY3RhZGFzLCBvZnJlY2nDqW5kb2xlcyB1biBlc3BhY2lvIHNlZ3VybyBwYXJhIGV4cHJlc2FyIHN1cyBlbW9jaW9uZXMuCgogICAgICAgICAgICAgIC5kaXYodGl0dWxvPSJFc2N1Y2hhIGFjdGl2YSIpCiAgICAgICAgICAgICAgICBwIExhIGhhYmlsaWRhZCBkZSBlc2N1Y2hhciBkZSBtYW5lcmEgZW1ww6F0aWNhIHkgdmFsaWRhciBsYXMgZW1vY2lvbmVzIGRlIGxvcyBhZmVjdGFkb3MgcHVlZGUgc2VyIGNydWNpYWwgcGFyYSBzdSByZWN1cGVyYWNpw7NuIGluaWNpYWwuCiAgICAgICAgICAuY29sLWxnLTQKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMjkucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKCiAgICAgICAgaDQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgYy4gUHJpbWVyb3MgYXV4aWxpb3MgcHNpY29sw7NnaWNvcwoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IEZpbmFsbWVudGUsIHVuYSBmb3JtYWNpw7NuIGVuIHByaW1lcm9zIGF1eGlsaW9zIHBzaWNvbMOzZ2ljb3MsIGVzIGVzZW5jaWFsLiBFc3RlIGVuZm9xdWUgcHJvcG9yY2lvbmEgaGVycmFtaWVudGFzIHByw6FjdGljYXMgcGFyYSBheXVkYXIgYSBsYXMgdsOtY3RpbWFzIGEgbWFuZWphciBzdXMgZW1vY2lvbmVzIHkgcmVhY2Npb25lcyBpbm1lZGlhdGFzIHRyYXMgdW5hIGNyaXNpcy4gTG9zIGNvbXBvbmVudGVzIGNsYXZlcyBpbmNsdXllbjoKCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAgICAgLmNvbC1sZy02Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZC0yX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzMwLnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBJbnRlcnZlbmNpb25lcyBicmV2ZXMKICAgICAgICAgICAgICAgIHAubWItMCBUw6ljbmljYXMgcXVlIHB1ZWRlbiBzZXIgYXBsaWNhZGFzIGVuIGVsIGx1Z2FyIGRlbCBpbmNpZGVudGUgcGFyYSBheXVkYXIgYSBsYXMgcGVyc29uYXMgYSByZWN1cGVyYXIgZWwgZXF1aWxpYnJpbyBlbW9jaW9uYWwuCiAgICAgICAgICAuY29sLWxnLTYubWItNChkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmQtMl9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8zMS5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMl9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgRWR1Y2FjacOzbiBzb2JyZSBsYSBub3JtYWxpZGFkIGRlIGxhcyByZWFjY2lvbmVzCiAgICAgICAgICAgICAgICBwLm1iLTAgSW5mb3JtYXIgYSBsYXMgdsOtY3RpbWFzIHF1ZSBzdXMgcmVhY2Npb25lcyBzb24gcmVzcHVlc3RhcyBuYXR1cmFsZXMgYSBldmVudG9zIHRyYXVtw6F0aWNvcyBwdWVkZSBheXVkYXIgYSByZWR1Y2lyIGxhIGFuZ3VzdGlhIHkgbGEgY29uZnVzacOzbi4KCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBGaW5hbG1lbnRlLCBsb3MgYnJpZ2FkaXN0YXMgc2UgYWRvcHRhbiBjb21vIGludGVncmFudGVzIGRlbCBlcXVpcG8gZGUgc2VndXJpZGFkIHkgc2FsdWQgZW4gZWwgdHJhYmFqbyBkZSBsYXMgY29tcGHDscOtYXMsIGFudGUgbG8gY3VhbCBkZWJlbiBzZXIgZm9ybWFkb3MgZW46CgoKICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFNhbHVkIHkgc2VndXJpZGFkIGVuIGVsIHRyYWJham8KICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAuY29sLWxnLTgKCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89Ik5vcm1hcyBkZSBzZWd1cmlkYWQgcGFyYSBsb3MgYnJpZ2FkaXN0YXMgZHVyYW50ZSBsYXMgb3BlcmFjaW9uZXMiKQogICAgICAgICAgICBwIExhIHNlZ3VyaWRhZCBkZSBsb3MgYnJpZ2FkaXN0YXMgZXMgcHJpbW9yZGlhbCwgZGFkbyBxdWUgc3UgdHJhYmFqbyBhIG1lbnVkbyBsb3MgZXhwb25lIGEgc2l0dWFjaW9uZXMgZGUgYWx0byByaWVzZ28uIEVzIGZ1bmRhbWVudGFsIHF1ZSBlc3TDqW4gZmFtaWxpYXJpemFkb3MgY29uIGxhcyBub3JtYXMgZGUgc2VndXJpZGFkIHF1ZSByaWdlbiBzdSBhY3RpdmlkYWQsIGxhcyBjdWFsZXMgZGViZW4gaW5jbHVpciBkaXJlY3RyaWNlcyBjbGFyYXMgc29icmUgY8OzbW8gYWN0dWFyIGVuIGRpZmVyZW50ZXMgZXNjZW5hcmlvcyBkZSBlbWVyZ2VuY2lhLiBFc3RvIGltcGxpY2EgY29ub2NlciBsYXMgbGV5ZXMgeSByZWd1bGFjaW9uZXMgbG9jYWxlcyBlIGludGVybmFjaW9uYWxlcyBxdWUgcmVndWxhbiBsYSBzZWd1cmlkYWQgZW4gZWwgdHJhYmFqbywgYXPDrSBjb21vIGxvcyBwcm9jZWRpbWllbnRvcyBlc3BlY8OtZmljb3MgZGUgbGEgb3JnYW5pemFjacOzbiBhIGxhIHF1ZSBwZXJ0ZW5lY2VuLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJNYW5lam8gZGUgc2l0dWFjaW9uZXMgZGUgcmllc2dvIHBhcmEgZWwgcGVyc29uYWwgZGUgbGEgYnJpZ2FkYSIpCiAgICAgICAgICAgIHAgTm8gc29sbyBzZSBuZWNlc2l0YSBmb3JtYWNpw7NuIHBhcmEgYWN0dWFyIGVuIGVtZXJnZW5jaWFzLCBzaW5vIHRhbWJpw6luIHBhcmEgaWRlbnRpZmljYXIgeSBldmFsdWFyIGxvcyByaWVzZ29zIHBvdGVuY2lhbGVzIHF1ZSBwdWVkZW4gYWZlY3RhciBhIGxvcyBtaWVtYnJvcyBkZSBsYSBicmlnYWRhLiBMb3MgYnJpZ2FkaXN0YXMgZGViZW4gYXByZW5kZXIgYSByZWFsaXphciBldmFsdWFjaW9uZXMgZGUgcmllc2dvIGFudGVzIGRlIGluaWNpYXIgY3VhbHF1aWVyIG9wZXJhY2nDs24sIGxvIGN1YWwgaW5jbHV5ZSBsYSBpZGVudGlmaWNhY2nDs24gZGUgcGVsaWdyb3MgZW4gZWwgZW50b3JubywgbGEgZXZhbHVhY2nDs24gZGVsIGVzdGFkbyBkZSBsb3MgZXF1aXBvcywgeSBsYSBjb25zaWRlcmFjacOzbiBkZSBmYWN0b3JlcyBjb21vIGVsIGNsaW1hIHkgbGEgZ2VvZ3JhZsOtYS4gQWRlbcOhcywgZGViZW4gZXN0YXIgY2FwYWNpdGFkb3MgcGFyYSBkZXNhcnJvbGxhciBwbGFuZXMgZGUgY29udGluZ2VuY2lhIHF1ZSBtaW5pbWljZW4gZWwgcmllc2dvIGR1cmFudGUgbGEgZWplY3VjacOzbiBkZSBzdXMgdGFyZWFzLgogICAgICAgICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iRXF1aXBvcyBkZSBQcm90ZWNjacOzbiBQZXJzb25hbCAoRVBQKSB5IHN1IHVzbyBhZGVjdWFkbyIpCiAgICAgICAgICAgIHAgRWwgdXNvIGFkZWN1YWRvIGRlIGxvcyBFcXVpcG9zIGRlIFByb3RlY2Npw7NuIFBlcnNvbmFsIGVzIHVuIGNvbXBvbmVudGUgY3J1Y2lhbCBkZSBsYSBjYXBhY2l0YWNpw7NuIGRlIGxhcyBicmlnYWRhcy4gRXN0byBpbmNsdXllIG5vIHNvbG8gZWwgY29ub2NpbWllbnRvIHNvYnJlIHF1w6kgZXF1aXBvIGVzIG5lY2VzYXJpbyBwYXJhIGNhZGEgdGlwbyBkZSBvcGVyYWNpw7NuIChjYXNjbywgZ3VhbnRlcywgZ2FmYXMgZGUgc2VndXJpZGFkLCB0cmFqZXMgZXNwZWNpYWxlcywgZXRjLiksIHNpbm8gdGFtYmnDqW4gY8OzbW8gZWxlZ2lyLCB1c2FyLCBtYW50ZW5lciB5IGFsbWFjZW5hciBjb3JyZWN0YW1lbnRlIGRpY2hvIGVxdWlwby4gTGEgZm9ybWFjacOzbiBkZWJlIGFiYXJjYXIgdGFtYmnDqW4gbGEgaW1wb3J0YW5jaWEgZGUgbGEgZXJnb25vbcOtYSB5IGVsIGJpZW5lc3RhciBkZWwgYnJpZ2FkaXN0YSwgcHJvbW92aWVuZG8gbGEgc2FsdWQgZsOtc2ljYSB5IG1lbnRhbCBlbiBzaXR1YWNpb25lcyBkZSBlc3Ryw6lzLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJQcm90b2NvbG9zIGRlIHByZXZlbmNpw7NuIGRlIGFjY2lkZW50ZXMgeSBlbmZlcm1lZGFkZXMgbGFib3JhbGVzIikKICAgICAgICAgICAgcCBEdXJhbnRlIEludGVydmVuY2lvbmVzIExhIGNhcGFjaXRhY2nDs24gZW4gcHJldmVuY2nDs24gZXMgZXNlbmNpYWwgcGFyYSByZWR1Y2lyIGxhIGluY2lkZW5jaWEgZGUgYWNjaWRlbnRlcyB5IGVuZmVybWVkYWRlcyBsYWJvcmFsZXMuIEVzdG8gaW5jbHV5ZSBlbCBkZXNhcnJvbGxvIGRlIHByb3RvY29sb3MgZGUgYWN0dWFjacOzbiBjb250cmEgZWwgYWdvdGFtaWVudG8gbyBlc3Ryw6lzLiBBZGVtw6FzLCBkZWJlbiBjb25vY2VyIGxvcyBwcm9jZWRpbWllbnRvcyBkZSBldmFjdWFjacOzbiB5IHByaW9yaXphciBsYSBzYWx1ZCB5IHNlZ3VyaWRhZCBkZWwgcGVyc29uYWwgZW4gZWwgbHVnYXIgZGUgdHJhYmFqby4gTG9zIGJyaWdhZGlzdGFzIGRlYmVuIHNlciBlbnRyZW5hZG9zIGVuIHTDqWNuaWNhcyBkZSBwcmltZXJvcyBhdXhpbGlvcywgbWFuZWpvIGRlIHN1c3RhbmNpYXMgcGVsaWdyb3NhcywgeSBlbiBsYSBpZGVudGlmaWNhY2nDs24gZGUgc2lnbm9zIGRlIHJlc2NhdGUgZW4gY2FzbyBxdWUgc3UgcHJvcGlhIHNlZ3VyaWRhZCBzZSB2ZWEgY29tcHJvbWV0aWRhLgoKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8zMi5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAoKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2xjL3RlY25vbG9naWNhZGVsb3JpZW50ZS90aXR1bG9zLzcwOTMyIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgVG9ycmVzIE5pZXRvLCBILiAoMjAxMikuIE1hbnVhbCBkZSBwcmltZXJvcyBhdXhpbGlvcyB5IGJyaWdhZGFzIGRlIGVtZXJnZW5jaWE6ICggZWQuKS4gRnVuZGFjacOzbiBVbml2ZXJzaXRhcmlhIGRlbCDDgXJlYSBBbmRpbmEuIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9MUNDYUZQbWlndDQiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBVUiBDYXBhY2l0YWNpb25lcy4gKDIwMjQsIDIgYWJyaWwpLiBVUiBDYXBhY2l0YWNpb25lcyBmaWNoYXMgZGUgdmFsb3JhY2nDs24geSByZXNwdWVzdGEgZGUgZW1lcmdlbmNpYXMKCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykK"},null]}